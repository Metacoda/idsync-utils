{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Metacoda Identity Sync Utilities (idsync-utils) Intro This site provides documentation for the Metacoda\u00ae Identity Sync Utilities (idsync-utils) repository on github where you will find extra samples and SAS macros that can be used with the Metacoda Identity Sync Plug-in . Metacoda customers and partners, and potentially other SAS customers, may find these utilities useful when setting up an identity synchronisation process between a SAS\u00ae Metadata Server and an external identity provider, such as Microsoft Active Directory. Installation Choose a suitable location in the file system on your SAS server (or workstation) and clone the repository from github e.g. git clone git@github.com:Metacoda/idsync-utils.git or: git clone https://github.com/Metacoda/idsync-utils.git Alternatively you can download a ZIP file from https://github.com/Metacoda/idsync-utils/archive/master.zip and unpack it into the desired location. If you want to make the SAS macros available using the SAS autocall facility you can add the path to the idsync-utils/sasautos directory into the SASAUTOS option by adding the following line into the appropriate sasv9_usermods.cfg file for your SAS platform installation e.g. /opt/sas94m4/config/Lev1/SASApp/sasv9_usermods.cfg -insert sasautos \"/path/to/idsync-utils/sasautos\" Repository Structure Folder Notes docs/ This documentation. samples/ Contains example Metacoda Identity Sync Profiles (.idsp files) and SAS programs that relate to SAS metadata identity synchronisation. sasautos/ Contains utility SAS macros that may be of use in an identity sync process. This directory can be added to the SAS autocall macro search path if required.","title":"Intro"},{"location":"#metacoda-identity-sync-utilities-idsync-utils","text":"","title":"Metacoda Identity Sync Utilities (idsync-utils)"},{"location":"#intro","text":"This site provides documentation for the Metacoda\u00ae Identity Sync Utilities (idsync-utils) repository on github where you will find extra samples and SAS macros that can be used with the Metacoda Identity Sync Plug-in . Metacoda customers and partners, and potentially other SAS customers, may find these utilities useful when setting up an identity synchronisation process between a SAS\u00ae Metadata Server and an external identity provider, such as Microsoft Active Directory.","title":"Intro"},{"location":"#installation","text":"Choose a suitable location in the file system on your SAS server (or workstation) and clone the repository from github e.g. git clone git@github.com:Metacoda/idsync-utils.git or: git clone https://github.com/Metacoda/idsync-utils.git Alternatively you can download a ZIP file from https://github.com/Metacoda/idsync-utils/archive/master.zip and unpack it into the desired location. If you want to make the SAS macros available using the SAS autocall facility you can add the path to the idsync-utils/sasautos directory into the SASAUTOS option by adding the following line into the appropriate sasv9_usermods.cfg file for your SAS platform installation e.g. /opt/sas94m4/config/Lev1/SASApp/sasv9_usermods.cfg -insert sasautos \"/path/to/idsync-utils/sasautos\"","title":"Installation"},{"location":"#repository-structure","text":"Folder Notes docs/ This documentation. samples/ Contains example Metacoda Identity Sync Profiles (.idsp files) and SAS programs that relate to SAS metadata identity synchronisation. sasautos/ Contains utility SAS macros that may be of use in an identity sync process. This directory can be added to the SAS autocall macro search path if required.","title":"Repository Structure"},{"location":"resources/","text":"Resources The following is a list of further resources where you can find more information on the Metacoda Identity Sync Plug-in, the identity sync process, and Identity Sync Profiles (IDSPs): Metacoda Identity Sync Product Page Metacoda Plug-ins Customer Documentation PlatformAdmin.com Blog Posts: Synchronising SAS Platform Identities Identity Sync: Multiple Active Directory Domains (Single Forest) Identity Sync: Finding Your Keys YouTube: Identity Sync Plug-in Demo","title":"Resources"},{"location":"resources/#resources","text":"The following is a list of further resources where you can find more information on the Metacoda Identity Sync Plug-in, the identity sync process, and Identity Sync Profiles (IDSPs): Metacoda Identity Sync Product Page Metacoda Plug-ins Customer Documentation PlatformAdmin.com Blog Posts: Synchronising SAS Platform Identities Identity Sync: Multiple Active Directory Domains (Single Forest) Identity Sync: Finding Your Keys YouTube: Identity Sync Plug-in Demo","title":"Resources"},{"location":"about/license/","text":"License The utilities contained in this repository are licensed under the terms of the Apache License 2.0 . See LICENSE.txt for more information. The Metacoda Identity Sync Plug-in which these utilities are intended to support is a commercial product from Metacoda Pty Ltd, and must be separately licensed from Metacoda if you want to use these utilities with it. If you do not license the Metacoda Identity Sync Plug-in from Metacoda then some of these utilities may still be of use to you with alternative SAS identity synchronisation processes. The license referenced above permits such use.","title":"License"},{"location":"about/license/#license","text":"The utilities contained in this repository are licensed under the terms of the Apache License 2.0 . See LICENSE.txt for more information. The Metacoda Identity Sync Plug-in which these utilities are intended to support is a commercial product from Metacoda Pty Ltd, and must be separately licensed from Metacoda if you want to use these utilities with it. If you do not license the Metacoda Identity Sync Plug-in from Metacoda then some of these utilities may still be of use to you with alternative SAS identity synchronisation processes. The license referenced above permits such use.","title":"License"},{"location":"about/trademarks/","text":"Trademarks Metacoda\u00ae and all other Metacoda product or service names are registered trademarks or trademarks of Metacoda Group Pty Ltd in the USA and other countries. SAS\u00ae and all other SAS Institute Inc. product or service names are registered trademarks or trademarks of SAS Institute Inc. in the USA and other countries. \u00ae indicates USA registration. Other product and company names mentioned herein may be registered trademarks or trademarks of their respective owners.","title":"Trademarks"},{"location":"about/trademarks/#trademarks","text":"Metacoda\u00ae and all other Metacoda product or service names are registered trademarks or trademarks of Metacoda Group Pty Ltd in the USA and other countries. SAS\u00ae and all other SAS Institute Inc. product or service names are registered trademarks or trademarks of SAS Institute Inc. in the USA and other countries. \u00ae indicates USA registration. Other product and company names mentioned herein may be registered trademarks or trademarks of their respective owners.","title":"Trademarks"},{"location":"samples/idsp-samples/","text":"Sample Identity Sync Profiles Identity Sync Profiles are usually created by using the Metacoda Identity Sync Profile Wizard within SAS Management Console. This wizard only provides access to the most commonly used configurable elements. To access to some of the more advanced features you will need to edit the IDSP XML directly. These sample Identity Sync Profiles show how those features can be added to an IDSP. idsync-ad-basic.idsp A basic example for synchronising identities in a SAS metadata server with Microsoft Active Directory. All of the other examples below can be compared with this basic example to review the XML changes required. See https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-basic.idsp idsync-ad-capture-data-other-attrs.idsp Demonstrates how to capture intermediate, otherwise temporary, working tables used in the identity sync process so those tables can also be used for custom post-processing outside of the Metacoda Identity Sync Plug-in. Also shows how to capture any additional AD object attributes required for that custom post-processing e.g. sAMAccountName, distinguishedName and objectGUID. See https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-capture-data-other-attrs.idsp idsync-ad-hybrid.idsp An example of a hybrid IDSP and it's corresponding child IDSPs (d1 and d2) for synchronising identities in a SAS metadata server with multiple sources, in this case 2x Microsoft Active Directory domain forests. See: https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid.idsp https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d1.idsp https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d2.idsp","title":"Sample Identity Sync Profiles"},{"location":"samples/idsp-samples/#sample-identity-sync-profiles","text":"Identity Sync Profiles are usually created by using the Metacoda Identity Sync Profile Wizard within SAS Management Console. This wizard only provides access to the most commonly used configurable elements. To access to some of the more advanced features you will need to edit the IDSP XML directly. These sample Identity Sync Profiles show how those features can be added to an IDSP.","title":"Sample Identity Sync Profiles"},{"location":"samples/idsp-samples/#idsync-ad-basicidsp","text":"A basic example for synchronising identities in a SAS metadata server with Microsoft Active Directory. All of the other examples below can be compared with this basic example to review the XML changes required. See https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-basic.idsp","title":"idsync-ad-basic.idsp"},{"location":"samples/idsp-samples/#idsync-ad-capture-data-other-attrsidsp","text":"Demonstrates how to capture intermediate, otherwise temporary, working tables used in the identity sync process so those tables can also be used for custom post-processing outside of the Metacoda Identity Sync Plug-in. Also shows how to capture any additional AD object attributes required for that custom post-processing e.g. sAMAccountName, distinguishedName and objectGUID. See https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-capture-data-other-attrs.idsp","title":"idsync-ad-capture-data-other-attrs.idsp"},{"location":"samples/idsp-samples/#idsync-ad-hybrididsp","text":"An example of a hybrid IDSP and it's corresponding child IDSPs (d1 and d2) for synchronising identities in a SAS metadata server with multiple sources, in this case 2x Microsoft Active Directory domain forests. See: https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid.idsp https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d1.idsp https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d2.idsp","title":"idsync-ad-hybrid.idsp"},{"location":"samples/sas-samples/","text":"Sample SAS Programs These SAS programs provide examples of how the SAS macros in this repository can be used: metacodaAuthDomainExtract.sas Extracts basic attributes for AuthenticationDomain objects in SAS metadata.. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaAuthDomainExtract.sas metacodaExtIdExtractSample.sas Extracts SAS ExternalIdentity metadata used to link SAS identities (users and groups) with their equivalent external identities, such as users and groups in Microsoft Active Directory. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaExtIdExtractSample.sas metacodaExtIdUpdateSample.sas Updates SAS ExternalIdentity metadata where there may be a requirement to remap/recode the identifiers that connect SAS identities with their equivalent externally synchronised users and groups. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaExtIdUpdateSample.sas metacodaIdentityGroupExtractSample.sas Extracts basic attributes for IdentityGroup (group and role) objects in SAS metadata.. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaIdentityGroupExtractSample.sas metacodaIdentityLoginExtractSample.sas Extracts SAS metadata for Login (account) objects associated with Identity (user and/or group) objects. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaIdentityLoginExtractSample.sas metacodaIdGroupMembersExtractSample.sas Extract SAS IdentityGroup (group and role) members metadata. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaIdGroupMembersExtractSample.sas metacodaPersonEmailExtractSample.sas Extracts SAS metadata for Email (address) objects associated with Person (user) objects. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonEmailExtractSample.sas metacodaPersonExtractSample.sas Extracts basic attributes for Person (user) objects in SAS metadata.. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonExtractSample.sas metacodaPersonIntLoginExtractSample.sas Extracts SAS metadata for InternalLogin (account) objects associated with Person (user) objects. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonIntLoginExtractSample.sas metacodaPersonLocationExtractSample.sas Extracts SAS metadata for Location (physical address) objects associated with Person (user) objects. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonLocationExtractSample.sas metacodaPersonPhoneExtractSample.sas Extracts SAS metadata for Phone (number) objects associated with Person (user) objects. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonPhoneExtractSample.sas metacodaXMLEncodeSample.sas A simple example of encoding text strings for use XML files/streams (such as SAS PROC METADATA). See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaXMLEncodeSample.sas","title":"Sample SAS Programs"},{"location":"samples/sas-samples/#sample-sas-programs","text":"These SAS programs provide examples of how the SAS macros in this repository can be used:","title":"Sample SAS Programs"},{"location":"samples/sas-samples/#metacodaauthdomainextractsas","text":"Extracts basic attributes for AuthenticationDomain objects in SAS metadata.. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaAuthDomainExtract.sas","title":"metacodaAuthDomainExtract.sas"},{"location":"samples/sas-samples/#metacodaextidextractsamplesas","text":"Extracts SAS ExternalIdentity metadata used to link SAS identities (users and groups) with their equivalent external identities, such as users and groups in Microsoft Active Directory. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaExtIdExtractSample.sas","title":"metacodaExtIdExtractSample.sas"},{"location":"samples/sas-samples/#metacodaextidupdatesamplesas","text":"Updates SAS ExternalIdentity metadata where there may be a requirement to remap/recode the identifiers that connect SAS identities with their equivalent externally synchronised users and groups. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaExtIdUpdateSample.sas","title":"metacodaExtIdUpdateSample.sas"},{"location":"samples/sas-samples/#metacodaidentitygroupextractsamplesas","text":"Extracts basic attributes for IdentityGroup (group and role) objects in SAS metadata.. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaIdentityGroupExtractSample.sas","title":"metacodaIdentityGroupExtractSample.sas"},{"location":"samples/sas-samples/#metacodaidentityloginextractsamplesas","text":"Extracts SAS metadata for Login (account) objects associated with Identity (user and/or group) objects. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaIdentityLoginExtractSample.sas","title":"metacodaIdentityLoginExtractSample.sas"},{"location":"samples/sas-samples/#metacodaidgroupmembersextractsamplesas","text":"Extract SAS IdentityGroup (group and role) members metadata. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaIdGroupMembersExtractSample.sas","title":"metacodaIdGroupMembersExtractSample.sas"},{"location":"samples/sas-samples/#metacodapersonemailextractsamplesas","text":"Extracts SAS metadata for Email (address) objects associated with Person (user) objects. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonEmailExtractSample.sas","title":"metacodaPersonEmailExtractSample.sas"},{"location":"samples/sas-samples/#metacodapersonextractsamplesas","text":"Extracts basic attributes for Person (user) objects in SAS metadata.. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonExtractSample.sas","title":"metacodaPersonExtractSample.sas"},{"location":"samples/sas-samples/#metacodapersonintloginextractsamplesas","text":"Extracts SAS metadata for InternalLogin (account) objects associated with Person (user) objects. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonIntLoginExtractSample.sas","title":"metacodaPersonIntLoginExtractSample.sas"},{"location":"samples/sas-samples/#metacodapersonlocationextractsamplesas","text":"Extracts SAS metadata for Location (physical address) objects associated with Person (user) objects. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonLocationExtractSample.sas","title":"metacodaPersonLocationExtractSample.sas"},{"location":"samples/sas-samples/#metacodapersonphoneextractsamplesas","text":"Extracts SAS metadata for Phone (number) objects associated with Person (user) objects. See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonPhoneExtractSample.sas","title":"metacodaPersonPhoneExtractSample.sas"},{"location":"samples/sas-samples/#metacodaxmlencodesamplesas","text":"A simple example of encoding text strings for use XML files/streams (such as SAS PROC METADATA). See https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaXMLEncodeSample.sas","title":"metacodaXMLEncodeSample.sas"},{"location":"sasautos/","text":"SAS Macros: Overview All SAS macros in this repository are named with a metacoda prefix to avoid name clashes with any of your existing SAS macros. Additionally, although the example usages show mixed case macro names, the macro source file names are always maintained in lower case to support their use as part of the SAS autocall macro facility, which transforms macro names to lower case file names before searching for them in the SASAUTOS file system search path. For more info see Guidelines for Naming Macro Files in the Using Autocall Libraries in UNIX Environments section of the SAS 9.4 Companion for UNIX Environments . The following SAS macros are provided in this repository. %metacodaAuthDomainExtract : Extract AuthenticationDomain objects from SAS metadata. %metacodaExtIdExtract : Extract ExternalIdentity objects from SAS metadata. %metacodaExtIdUpdate : Update ExternalIdentity objects in SAS metadata. %metacodaIdentityGroupExtract : Extract IdentityGroup (group and role) objects from SAS metadata. %metacodaIdentityLoginExtract : Extract Login (account) objects associated with Identity (user and/or group) objects in SAS metadata. %metacodaIdGroupMembersExtract : Extract SAS IdentityGroup (group and role) members metadata. %metacodaPersonEmailExtract : Extract Email (address) objects associated with Person (user) objects in SAS metadata. %metacodaPersonExtract : Extract Person (user) objects from SAS metadata. %metacodaPersonIntLoginExtract : Extract InternalLogin (account) objects associated with Person (user) objects in SAS metadata. %metacodaPersonLocationExtract : Extract Location (physical address) objects associated with Person (user) objects in SAS metadata. %metacodaPersonPhoneExtract : Extract Phone (number) objects associated with Person (user) objects in SAS metadata. %metacodaXMLEncode : Encode text for use in XML files or streams.","title":"Overview"},{"location":"sasautos/#sas-macros-overview","text":"All SAS macros in this repository are named with a metacoda prefix to avoid name clashes with any of your existing SAS macros. Additionally, although the example usages show mixed case macro names, the macro source file names are always maintained in lower case to support their use as part of the SAS autocall macro facility, which transforms macro names to lower case file names before searching for them in the SASAUTOS file system search path. For more info see Guidelines for Naming Macro Files in the Using Autocall Libraries in UNIX Environments section of the SAS 9.4 Companion for UNIX Environments . The following SAS macros are provided in this repository. %metacodaAuthDomainExtract : Extract AuthenticationDomain objects from SAS metadata. %metacodaExtIdExtract : Extract ExternalIdentity objects from SAS metadata. %metacodaExtIdUpdate : Update ExternalIdentity objects in SAS metadata. %metacodaIdentityGroupExtract : Extract IdentityGroup (group and role) objects from SAS metadata. %metacodaIdentityLoginExtract : Extract Login (account) objects associated with Identity (user and/or group) objects in SAS metadata. %metacodaIdGroupMembersExtract : Extract SAS IdentityGroup (group and role) members metadata. %metacodaPersonEmailExtract : Extract Email (address) objects associated with Person (user) objects in SAS metadata. %metacodaPersonExtract : Extract Person (user) objects from SAS metadata. %metacodaPersonIntLoginExtract : Extract InternalLogin (account) objects associated with Person (user) objects in SAS metadata. %metacodaPersonLocationExtract : Extract Location (physical address) objects associated with Person (user) objects in SAS metadata. %metacodaPersonPhoneExtract : Extract Phone (number) objects associated with Person (user) objects in SAS metadata. %metacodaXMLEncode : Encode text for use in XML files or streams.","title":"SAS Macros: Overview"},{"location":"sasautos/metacodaAuthDomainExtract/","text":"SAS Macro: %metacodaAuthDomainExtract Purpose This macro is used to extract basic attribute values for AuthenticationDomain objects from SAS metadata. Parameters %macro metacodaAuthDomainExtract( table=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug. Examples Extract basic metadata attributes for all AuthenticationDomain objects: %metacodaAuthDomainExtract(table=work.authDomains) For more examples see metacodaAuthDomainExtractSample.sas .","title":"%metacodaAuthDomainExtract"},{"location":"sasautos/metacodaAuthDomainExtract/#sas-macro-metacodaauthdomainextract","text":"","title":"SAS Macro: %metacodaAuthDomainExtract"},{"location":"sasautos/metacodaAuthDomainExtract/#purpose","text":"This macro is used to extract basic attribute values for AuthenticationDomain objects from SAS metadata.","title":"Purpose"},{"location":"sasautos/metacodaAuthDomainExtract/#parameters","text":"%macro metacodaAuthDomainExtract( table=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug.","title":"Parameters"},{"location":"sasautos/metacodaAuthDomainExtract/#examples","text":"Extract basic metadata attributes for all AuthenticationDomain objects: %metacodaAuthDomainExtract(table=work.authDomains) For more examples see metacodaAuthDomainExtractSample.sas .","title":"Examples"},{"location":"sasautos/metacodaExtIdExtract/","text":"SAS Macro: %metacodaExtIdExtract Purpose This macro is used to extract basic attribute values for ExternalIdentity objects from SAS metadata. ExternalIdentity objects are created during identity synchronisation with external identity sources such as Microsoft Active Directory. They contain the 3rd party keys for those external users and groups that allow us to re-locate those external identities when a subsequent sync is done, ideally even when the external users and groups are renamed or moved into another part of the directory. Parameters %macro metacodaExtIdExtract( table=, context=, associatedModelType=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. context : (OPTIONAL) If specified, will limit the output to ExternalIdentity objects with the specified Context attribute value. e.g. Active Directory Import associatedModelType : (OPTIONAL) If specified, will limit the output to ExternalIdentity objects that are associated with metadata objects of the specified model type. e.g. Person or IdentityGroup xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug. Examples Extract external identity metadata for all AD-synced users: %metacodaExtIdExtract( table=work.adUserExtIds, context=Active Directory Import, associatedModelType=Person ) Extract external identity metadata for all AD-synced groups: %metacodaExtIdExtract( table=work.adGroupExtIds, context=Active Directory Import, associatedModelType=IdentityGroup ) For more examples see metacodaExtIdExtractSample.sas .","title":"%metacodaExtIdExtract"},{"location":"sasautos/metacodaExtIdExtract/#sas-macro-metacodaextidextract","text":"","title":"SAS Macro: %metacodaExtIdExtract"},{"location":"sasautos/metacodaExtIdExtract/#purpose","text":"This macro is used to extract basic attribute values for ExternalIdentity objects from SAS metadata. ExternalIdentity objects are created during identity synchronisation with external identity sources such as Microsoft Active Directory. They contain the 3rd party keys for those external users and groups that allow us to re-locate those external identities when a subsequent sync is done, ideally even when the external users and groups are renamed or moved into another part of the directory.","title":"Purpose"},{"location":"sasautos/metacodaExtIdExtract/#parameters","text":"%macro metacodaExtIdExtract( table=, context=, associatedModelType=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. context : (OPTIONAL) If specified, will limit the output to ExternalIdentity objects with the specified Context attribute value. e.g. Active Directory Import associatedModelType : (OPTIONAL) If specified, will limit the output to ExternalIdentity objects that are associated with metadata objects of the specified model type. e.g. Person or IdentityGroup xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug.","title":"Parameters"},{"location":"sasautos/metacodaExtIdExtract/#examples","text":"Extract external identity metadata for all AD-synced users: %metacodaExtIdExtract( table=work.adUserExtIds, context=Active Directory Import, associatedModelType=Person ) Extract external identity metadata for all AD-synced groups: %metacodaExtIdExtract( table=work.adGroupExtIds, context=Active Directory Import, associatedModelType=IdentityGroup ) For more examples see metacodaExtIdExtractSample.sas .","title":"Examples"},{"location":"sasautos/metacodaExtIdUpdate/","text":"SAS Macro: %metacodaExtIdUpdate WARNING WARNING: THIS MACRO UPDATES SAS METADATA. When provided with correct parameters, and running in an environment with valid SAS metadata options, this macro will update SAS metadata ExternalIdentity objects which may break any existing identity sync process you current have operating, and has the potential to DELETE users and group at the next sync operation unless you have delete-protection in your sync process. Do not modify and run this program unless it is your intention to update ExternalIdentity metadata, you are fully aware of the potential consequences, and are confident you have adequate SAS metadata backups so you can revert the process if required. If you are unsure please contact Metacoda Support support@metacoda.com to discuss further. Purpose This macro is used to update basic attribute values for existing ExternalIdentity objects from SAS metadata. ExternalIdentity objects are used to maintain unique identifiers in metadata that link SAS identities to external identities (such as Microsoft Active Directory users & groups). The metacodaExtIdUpdate macro can be used as part of a process to perform a bulk update of keyId values if you want to migrate the type of unique identifier you are using for identity sync. For example you might want to switch from using sAMAccountName to objectGUID for users, and switch from using distinguishedName to objectGUID. By switching to objectGUID we can take advantage of a better choice for an unchanging unique id for objects in Active Directory. The macro takes a table of ExternalIdentity metadata object ids and new identifier (keyId) values and applies those new values to SAS metadata. Parameters %macro metacodaExtIdUpdate( table=, extIdObjIdColName=, extIdNewIdentifierColName=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters to identify a SAS table and columns as input and used SAS PROC METADATA to update metadata according to the table contents. table : (MANDATORY) The (1 or 2 level) name of an input table containing the ExternalIdentity Identifier values to update. extIdObjIdColName : (MANDATORY) The name of the column in the supplied table that contains the metadata object id values for the ExternalIdentity objects to be updated. extIdNewIdentifierColName : (MANDATORY) The name of the column in the supplied table that contains the new ExternalIdentity Identifier values. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request and response XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug. Examples Update ExternalIdentity Identifier (keyId) values for AD-synced users: %metacodaExtIdUpdate( table=work.userExtIdUpdate, extIdObjIdColName=extIdObjId, extIdNewIdentifierColName=extIdNewIdentifier ) Update ExternalIdentity Identifier (keyId) values for AD-synced groups: %metacodaExtIdUpdate( table=groupExtIdUpdate, extIdObjIdColName=extIdObjId, extIdNewIdentifierColName=extIdNewIdentifier ) See the sample metacodaExtIdUpdateSample.sas for a more in-depth example of how a keyId migration can be done with the help of the Metacoda Identity Sync Plug-in.","title":"%metacodaExtIdUpdate"},{"location":"sasautos/metacodaExtIdUpdate/#sas-macro-metacodaextidupdate","text":"","title":"SAS Macro: %metacodaExtIdUpdate"},{"location":"sasautos/metacodaExtIdUpdate/#warning","text":"WARNING: THIS MACRO UPDATES SAS METADATA. When provided with correct parameters, and running in an environment with valid SAS metadata options, this macro will update SAS metadata ExternalIdentity objects which may break any existing identity sync process you current have operating, and has the potential to DELETE users and group at the next sync operation unless you have delete-protection in your sync process. Do not modify and run this program unless it is your intention to update ExternalIdentity metadata, you are fully aware of the potential consequences, and are confident you have adequate SAS metadata backups so you can revert the process if required. If you are unsure please contact Metacoda Support support@metacoda.com to discuss further.","title":"WARNING"},{"location":"sasautos/metacodaExtIdUpdate/#purpose","text":"This macro is used to update basic attribute values for existing ExternalIdentity objects from SAS metadata. ExternalIdentity objects are used to maintain unique identifiers in metadata that link SAS identities to external identities (such as Microsoft Active Directory users & groups). The metacodaExtIdUpdate macro can be used as part of a process to perform a bulk update of keyId values if you want to migrate the type of unique identifier you are using for identity sync. For example you might want to switch from using sAMAccountName to objectGUID for users, and switch from using distinguishedName to objectGUID. By switching to objectGUID we can take advantage of a better choice for an unchanging unique id for objects in Active Directory. The macro takes a table of ExternalIdentity metadata object ids and new identifier (keyId) values and applies those new values to SAS metadata.","title":"Purpose"},{"location":"sasautos/metacodaExtIdUpdate/#parameters","text":"%macro metacodaExtIdUpdate( table=, extIdObjIdColName=, extIdNewIdentifierColName=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters to identify a SAS table and columns as input and used SAS PROC METADATA to update metadata according to the table contents. table : (MANDATORY) The (1 or 2 level) name of an input table containing the ExternalIdentity Identifier values to update. extIdObjIdColName : (MANDATORY) The name of the column in the supplied table that contains the metadata object id values for the ExternalIdentity objects to be updated. extIdNewIdentifierColName : (MANDATORY) The name of the column in the supplied table that contains the new ExternalIdentity Identifier values. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request and response XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug.","title":"Parameters"},{"location":"sasautos/metacodaExtIdUpdate/#examples","text":"Update ExternalIdentity Identifier (keyId) values for AD-synced users: %metacodaExtIdUpdate( table=work.userExtIdUpdate, extIdObjIdColName=extIdObjId, extIdNewIdentifierColName=extIdNewIdentifier ) Update ExternalIdentity Identifier (keyId) values for AD-synced groups: %metacodaExtIdUpdate( table=groupExtIdUpdate, extIdObjIdColName=extIdObjId, extIdNewIdentifierColName=extIdNewIdentifier ) See the sample metacodaExtIdUpdateSample.sas for a more in-depth example of how a keyId migration can be done with the help of the Metacoda Identity Sync Plug-in.","title":"Examples"},{"location":"sasautos/metacodaIdGroupMembersExtract/","text":"SAS Macro: %metacodaIdGroupMembersExtract Purpose This macro is used to extract member information for SAS IdentityGroup (group and role) objects. It can be used to extract Person (user) members, nested IdentityGroup (group and role) members, or both combined. If you have any role contributions in your SAS environment then you will also see these as roles being members of other roles. Parameters %macro metacodaIdGroupMembersExtract( table=, memberType=, append=0, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten (or appended to). memberType : (OPTIONAL) The SAS metadata model type for the type of member identities that will be extracted. The value must be either blank, Person, or IdentityGroup. If the value is blank then both Person (user) and IdentityGroup (group and role) members will be extracted. The default is blank. append : (OPTIONAL) A flag (0/1) indicating whether to overwrite or append to the specified table. The default is zero to overwrite. This parameter is ignored when the memberType parameter is blank (and the table will be overwritten). xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug. Examples Extract all member metadata for all groups and roles: %metacodaIdGroupMembersExtract(table=work.idGroupMembers) For more examples see metacodaIdGroupMembersExtractSample.sas .","title":"%metacodaIdGroupMembersExtract"},{"location":"sasautos/metacodaIdGroupMembersExtract/#sas-macro-metacodaidgroupmembersextract","text":"","title":"SAS Macro: %metacodaIdGroupMembersExtract"},{"location":"sasautos/metacodaIdGroupMembersExtract/#purpose","text":"This macro is used to extract member information for SAS IdentityGroup (group and role) objects. It can be used to extract Person (user) members, nested IdentityGroup (group and role) members, or both combined. If you have any role contributions in your SAS environment then you will also see these as roles being members of other roles.","title":"Purpose"},{"location":"sasautos/metacodaIdGroupMembersExtract/#parameters","text":"%macro metacodaIdGroupMembersExtract( table=, memberType=, append=0, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten (or appended to). memberType : (OPTIONAL) The SAS metadata model type for the type of member identities that will be extracted. The value must be either blank, Person, or IdentityGroup. If the value is blank then both Person (user) and IdentityGroup (group and role) members will be extracted. The default is blank. append : (OPTIONAL) A flag (0/1) indicating whether to overwrite or append to the specified table. The default is zero to overwrite. This parameter is ignored when the memberType parameter is blank (and the table will be overwritten). xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug.","title":"Parameters"},{"location":"sasautos/metacodaIdGroupMembersExtract/#examples","text":"Extract all member metadata for all groups and roles: %metacodaIdGroupMembersExtract(table=work.idGroupMembers) For more examples see metacodaIdGroupMembersExtractSample.sas .","title":"Examples"},{"location":"sasautos/metacodaIdentityGroupExtract/","text":"SAS Macro: %metacodaIdentityGroupExtract Purpose This macro is used to extract basic attribute values for IdentityGroup objects (groups and roles) from SAS metadata. Parameters %macro metacodaIdentityGroupExtract( table=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug. Examples Extract basic metadata attributes for all groups and roles: %metacodaIdentityGroupExtract(table=work.idGroups) For more examples see metacodaIdentityGroupExtractSample.sas .","title":"%metacodaIdentityGroupExtract"},{"location":"sasautos/metacodaIdentityGroupExtract/#sas-macro-metacodaidentitygroupextract","text":"","title":"SAS Macro: %metacodaIdentityGroupExtract"},{"location":"sasautos/metacodaIdentityGroupExtract/#purpose","text":"This macro is used to extract basic attribute values for IdentityGroup objects (groups and roles) from SAS metadata.","title":"Purpose"},{"location":"sasautos/metacodaIdentityGroupExtract/#parameters","text":"%macro metacodaIdentityGroupExtract( table=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug.","title":"Parameters"},{"location":"sasautos/metacodaIdentityGroupExtract/#examples","text":"Extract basic metadata attributes for all groups and roles: %metacodaIdentityGroupExtract(table=work.idGroups) For more examples see metacodaIdentityGroupExtractSample.sas .","title":"Examples"},{"location":"sasautos/metacodaIdentityLoginExtract/","text":"SAS Macro: %metacodaIdentityLoginExtract Purpose This macro is used to extract basic attribute values for SAS metadata Login (account) objects that are associated with Identity (user and/or group) objects. Parameters %macro metacodaIdentityLoginExtract( table=, identityType=, append=0, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten (or appended to). identityType : (OPTIONAL) The SAS metadata model type for the type of identity whose Logins will be extracted. The value must be either blank, Person, or IdentityGroup. If the value is blank then Logins for both Person (user) and IdentityGroup (group) types will be extracted. The default is blank. append : (OPTIONAL) A flag (0/1) indicating whether to overwrite or append to the specified table. The default is zero to overwrite. This parameter is ignored when the identityType parameter is blank (and the table will be overwritten). xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug. Examples Extract login metadata for all users and groups: %metacodaIdentityLoginExtract(table=work.identityLogins) For more examples see metacodaIdentityLoginExtractSample.sas .","title":"%metacodaIdentityLoginExtract"},{"location":"sasautos/metacodaIdentityLoginExtract/#sas-macro-metacodaidentityloginextract","text":"","title":"SAS Macro: %metacodaIdentityLoginExtract"},{"location":"sasautos/metacodaIdentityLoginExtract/#purpose","text":"This macro is used to extract basic attribute values for SAS metadata Login (account) objects that are associated with Identity (user and/or group) objects.","title":"Purpose"},{"location":"sasautos/metacodaIdentityLoginExtract/#parameters","text":"%macro metacodaIdentityLoginExtract( table=, identityType=, append=0, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten (or appended to). identityType : (OPTIONAL) The SAS metadata model type for the type of identity whose Logins will be extracted. The value must be either blank, Person, or IdentityGroup. If the value is blank then Logins for both Person (user) and IdentityGroup (group) types will be extracted. The default is blank. append : (OPTIONAL) A flag (0/1) indicating whether to overwrite or append to the specified table. The default is zero to overwrite. This parameter is ignored when the identityType parameter is blank (and the table will be overwritten). xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug.","title":"Parameters"},{"location":"sasautos/metacodaIdentityLoginExtract/#examples","text":"Extract login metadata for all users and groups: %metacodaIdentityLoginExtract(table=work.identityLogins) For more examples see metacodaIdentityLoginExtractSample.sas .","title":"Examples"},{"location":"sasautos/metacodaPersonEmailExtract/","text":"SAS Macro: %metacodaPersonEmailExtract Purpose This macro is used to extract basic attribute values for SAS metadata Email (address) objects that are associated with Person (user) objects. Parameters %macro metacodaPersonEmailExtract( table=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug. Examples Extract email metadata for all users: %metacodaPersonEmailExtract(table=work.personEmails) For more examples see metacodaPersonEmailExtractSample.sas .","title":"%metacodaPersonEmailExtract"},{"location":"sasautos/metacodaPersonEmailExtract/#sas-macro-metacodapersonemailextract","text":"","title":"SAS Macro: %metacodaPersonEmailExtract"},{"location":"sasautos/metacodaPersonEmailExtract/#purpose","text":"This macro is used to extract basic attribute values for SAS metadata Email (address) objects that are associated with Person (user) objects.","title":"Purpose"},{"location":"sasautos/metacodaPersonEmailExtract/#parameters","text":"%macro metacodaPersonEmailExtract( table=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug.","title":"Parameters"},{"location":"sasautos/metacodaPersonEmailExtract/#examples","text":"Extract email metadata for all users: %metacodaPersonEmailExtract(table=work.personEmails) For more examples see metacodaPersonEmailExtractSample.sas .","title":"Examples"},{"location":"sasautos/metacodaPersonExtract/","text":"SAS Macro: %metacodaPersonExtract Purpose This macro is used to extract basic attribute values for Person objects (users) from SAS metadata. Parameters %macro metacodaPersonExtract( table=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug. Examples Extract basic metadata attributes for all users: %metacodaPersonExtract(table=work.persons) For more examples see metacodaPersonExtractSample.sas .","title":"%metacodaPersonExtract"},{"location":"sasautos/metacodaPersonExtract/#sas-macro-metacodapersonextract","text":"","title":"SAS Macro: %metacodaPersonExtract"},{"location":"sasautos/metacodaPersonExtract/#purpose","text":"This macro is used to extract basic attribute values for Person objects (users) from SAS metadata.","title":"Purpose"},{"location":"sasautos/metacodaPersonExtract/#parameters","text":"%macro metacodaPersonExtract( table=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug.","title":"Parameters"},{"location":"sasautos/metacodaPersonExtract/#examples","text":"Extract basic metadata attributes for all users: %metacodaPersonExtract(table=work.persons) For more examples see metacodaPersonExtractSample.sas .","title":"Examples"},{"location":"sasautos/metacodaPersonIntLoginExtract/","text":"SAS Macro: %metacodaPersonIntLoginExtract Purpose This macro is used to extract basic attribute values for SAS metadata InternalLogin (account) objects that are associated with Person (user) objects. Parameters %macro metacodaPersonIntLoginExtract( table=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug. Examples Extract InternalLogin metadata for all users: %metacodaPersonIntLoginExtract(table=work.personIntLogins) For more examples see metacodaPersonIntLoginExtractSample.sas .","title":"%metacodaPersonIntLoginExtract"},{"location":"sasautos/metacodaPersonIntLoginExtract/#sas-macro-metacodapersonintloginextract","text":"","title":"SAS Macro: %metacodaPersonIntLoginExtract"},{"location":"sasautos/metacodaPersonIntLoginExtract/#purpose","text":"This macro is used to extract basic attribute values for SAS metadata InternalLogin (account) objects that are associated with Person (user) objects.","title":"Purpose"},{"location":"sasautos/metacodaPersonIntLoginExtract/#parameters","text":"%macro metacodaPersonIntLoginExtract( table=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug.","title":"Parameters"},{"location":"sasautos/metacodaPersonIntLoginExtract/#examples","text":"Extract InternalLogin metadata for all users: %metacodaPersonIntLoginExtract(table=work.personIntLogins) For more examples see metacodaPersonIntLoginExtractSample.sas .","title":"Examples"},{"location":"sasautos/metacodaPersonLocationExtract/","text":"SAS Macro: %metacodaPersonLocationExtract Purpose This macro is used to extract basic attribute values for SAS metadata Location (physical address) objects that are associated with Person (user) objects. Parameters %macro metacodaPersonLocationExtract( table=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug. Examples Extract location metadata for all users: %metacodaPersonLocationExtract(table=work.personLocations) For more examples see metacodaPersonLocationExtractSample.sas .","title":"%metacodaPersonLocationExtract"},{"location":"sasautos/metacodaPersonLocationExtract/#sas-macro-metacodapersonlocationextract","text":"","title":"SAS Macro: %metacodaPersonLocationExtract"},{"location":"sasautos/metacodaPersonLocationExtract/#purpose","text":"This macro is used to extract basic attribute values for SAS metadata Location (physical address) objects that are associated with Person (user) objects.","title":"Purpose"},{"location":"sasautos/metacodaPersonLocationExtract/#parameters","text":"%macro metacodaPersonLocationExtract( table=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug.","title":"Parameters"},{"location":"sasautos/metacodaPersonLocationExtract/#examples","text":"Extract location metadata for all users: %metacodaPersonLocationExtract(table=work.personLocations) For more examples see metacodaPersonLocationExtractSample.sas .","title":"Examples"},{"location":"sasautos/metacodaPersonPhoneExtract/","text":"SAS Macro: %metacodaPersonPhoneExtract Purpose This macro is used to extract basic attribute values for SAS metadata Phone (number) objects that are associated with Person (user) objects. Parameters %macro metacodaPersonPhoneExtract( table=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug. Examples Extract phone metadata for all users: %metacodaPersonPhoneExtract(table=work.personPhones) For more examples see metacodaPersonPhoneExtractSample.sas .","title":"%metacodaPersonPhoneExtract"},{"location":"sasautos/metacodaPersonPhoneExtract/#sas-macro-metacodapersonphoneextract","text":"","title":"SAS Macro: %metacodaPersonPhoneExtract"},{"location":"sasautos/metacodaPersonPhoneExtract/#purpose","text":"This macro is used to extract basic attribute values for SAS metadata Phone (number) objects that are associated with Person (user) objects.","title":"Purpose"},{"location":"sasautos/metacodaPersonPhoneExtract/#parameters","text":"%macro metacodaPersonPhoneExtract( table=, xmlDir=, debug=0 ); This macro accepts several mandatory and optional named parameters and generates a SAS table as output. table : (MANDATORY) The output table name (1 or 2 level) that will be overwritten. xmlDir : (OPTIONAL) Path to a directory where PROC METADATA request, response, and map XML files will be written. If unspecified the work directory path will be used by default. debug : (OPTIONAL) A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes. The default is zero for no debug.","title":"Parameters"},{"location":"sasautos/metacodaPersonPhoneExtract/#examples","text":"Extract phone metadata for all users: %metacodaPersonPhoneExtract(table=work.personPhones) For more examples see metacodaPersonPhoneExtractSample.sas .","title":"Examples"},{"location":"sasautos/metacodaXMLEncode/","text":"SAS Macro: %metacodaXMLEncode Purpose This macro is used for consistent encoding of text so that it can be used in an XML file or stream, such as those used with SAS PROC METADATA. Parameters %macro metacodaXMLEncode(text); This macro accepts a single mandatory positional parameter to generate the encoded text. The result is the generation of an htmlencode function call to encode the supplied text. text : (MANDATORY) The text to be encoded. Examples Used in a data step, encodes the displayName variable, within an XML attribute specification. encoded = cats(' DisplayName=\"', %metacodaXMLEncode(displayName), '\"/>'); For another example see metacodaXMLEncodeSample.sas .","title":"%metacodaXMLEncode"},{"location":"sasautos/metacodaXMLEncode/#sas-macro-metacodaxmlencode","text":"","title":"SAS Macro: %metacodaXMLEncode"},{"location":"sasautos/metacodaXMLEncode/#purpose","text":"This macro is used for consistent encoding of text so that it can be used in an XML file or stream, such as those used with SAS PROC METADATA.","title":"Purpose"},{"location":"sasautos/metacodaXMLEncode/#parameters","text":"%macro metacodaXMLEncode(text); This macro accepts a single mandatory positional parameter to generate the encoded text. The result is the generation of an htmlencode function call to encode the supplied text. text : (MANDATORY) The text to be encoded.","title":"Parameters"},{"location":"sasautos/metacodaXMLEncode/#examples","text":"Used in a data step, encodes the displayName variable, within an XML attribute specification. encoded = cats(' DisplayName=\"', %metacodaXMLEncode(displayName), '\"/>'); For another example see metacodaXMLEncodeSample.sas .","title":"Examples"},{"location":"topics/ad-domains/","text":"Active Directory Domains This section describes some of the common scenarios when synchronising SAS metadata with Microsoft Active Directory (AD) domains and how Metacoda Identity Sync Profiles (IDSPs) can support these. Single Domain / Single IDSP The most common scenario is synchronising with a single domain. This can be supported with a single IDSP as described in the Single (Basic) Identity Sync Profile section of Identity Sync Profiles & Process and illustrated below: Multiple Domains / Single Forest / Single IDSP Sometimes it is necessary to synchronise with multiple AD domains. If these domains are all within the same AD forest then this can also be supported with a single IDSP. When following the well known AGDLP or AGUDLP models for organising groups that span domains, the IDSP can target groups in one of the domains and the Metacoda Identity Sync process will follow group members into other domains in the same forest as shown in the diagram below. The IDSP targets the AU domain in the AU forest. The Finance Domain Local group is one of the included groups. When processing group members, the Finance Universal group includes a Finance Global group from the EU domain (in the same forest) so all of its members are also considered for synchronisation. The Identity Sync Process for this scenario is very similar to the single domain scenario except that the source identity extraction process can return members from multiple domains in the same forest. The following diagram illustrates this variation. In scenarios like this, where multiple domains are involved, you will most likely want to choose pseudo-attributes, such as sAMAccountNameWithDomain , that automatically include the name of the source domain (as dynamically determined from the directory) when choosing attributes mappings in the Identity Sync Profile Wizard. Multiple Domains / Multiple Forests / Hybrid IDSP When SAS metadata identities need to be sourced from multiple AD domains, across multiple AD forests, it is necessary to use a Hybrid IDSP with at least one child IDSP per forest. For more information on Hybrid IDSPs see the Multiple (Hybrid) Identity Sync Profiles section of Identity Sync Profiles & Process . The diagram below illustrates the Identity Sync Process for this scenario, where there are two AD domains, D1 and D2, which are in different AD forests. There are two child IDSPs, one for each domain, wrapped up in a Hybrid IDSP. Foreign Security Principals Occasionally when dealing with multiple domains you may encounter the following error message during the Identity Sync Process: Failed to fetch included AD groups: Can't follow Foreign-Security-Principal into trusted domain for AD identity (with DN 'CN=S-1-5-21-1234567890-123456789-123456789-1234,CN=ForeignSecurityPrincipals,DC=d1,DC=example,DC=com'). This is an error generated to highlight the fact that at least one of the targeted groups in the D1 domain contains a member from a domain in a different forest. This indicates a situation where there are multiple AD forests with trust relationships. Whilst the single IDSP scenarios support following groups into domains within the same forest, they do not support following groups into domains in other forests. To synchronise with multiple domains across one or more forests it is necessary to use Hybrid IDSPs and, if required, modify any affected child IDSPs to ensure they ignore Foreign Security Principals. To ignore Foreign Security Principals, the IDSP will need to be modified using a text editor, and the foreignSecurityPrincipalHandling attribute added to the LDAPConfig tag with a value of ignore like so: <LDAPConfig ... foreignSecurityPrincipalHandling=\"ignore\" /> This will ignore any group members that come from another forest (instead of generating an error). If those members are actually required in SAS metadata then you will need to ensure that they are within a targeted group in the hybrid child IDSP that corresponds to that foreign domain.","title":"Active Directory Domains"},{"location":"topics/ad-domains/#active-directory-domains","text":"This section describes some of the common scenarios when synchronising SAS metadata with Microsoft Active Directory (AD) domains and how Metacoda Identity Sync Profiles (IDSPs) can support these.","title":"Active Directory Domains"},{"location":"topics/ad-domains/#single-domain-single-idsp","text":"The most common scenario is synchronising with a single domain. This can be supported with a single IDSP as described in the Single (Basic) Identity Sync Profile section of Identity Sync Profiles & Process and illustrated below:","title":"Single Domain / Single IDSP"},{"location":"topics/ad-domains/#multiple-domains-single-forest-single-idsp","text":"Sometimes it is necessary to synchronise with multiple AD domains. If these domains are all within the same AD forest then this can also be supported with a single IDSP. When following the well known AGDLP or AGUDLP models for organising groups that span domains, the IDSP can target groups in one of the domains and the Metacoda Identity Sync process will follow group members into other domains in the same forest as shown in the diagram below. The IDSP targets the AU domain in the AU forest. The Finance Domain Local group is one of the included groups. When processing group members, the Finance Universal group includes a Finance Global group from the EU domain (in the same forest) so all of its members are also considered for synchronisation. The Identity Sync Process for this scenario is very similar to the single domain scenario except that the source identity extraction process can return members from multiple domains in the same forest. The following diagram illustrates this variation. In scenarios like this, where multiple domains are involved, you will most likely want to choose pseudo-attributes, such as sAMAccountNameWithDomain , that automatically include the name of the source domain (as dynamically determined from the directory) when choosing attributes mappings in the Identity Sync Profile Wizard.","title":"Multiple Domains / Single Forest / Single IDSP"},{"location":"topics/ad-domains/#multiple-domains-multiple-forests-hybrid-idsp","text":"When SAS metadata identities need to be sourced from multiple AD domains, across multiple AD forests, it is necessary to use a Hybrid IDSP with at least one child IDSP per forest. For more information on Hybrid IDSPs see the Multiple (Hybrid) Identity Sync Profiles section of Identity Sync Profiles & Process . The diagram below illustrates the Identity Sync Process for this scenario, where there are two AD domains, D1 and D2, which are in different AD forests. There are two child IDSPs, one for each domain, wrapped up in a Hybrid IDSP.","title":"Multiple Domains / Multiple Forests / Hybrid IDSP"},{"location":"topics/ad-domains/#foreign-security-principals","text":"Occasionally when dealing with multiple domains you may encounter the following error message during the Identity Sync Process: Failed to fetch included AD groups: Can't follow Foreign-Security-Principal into trusted domain for AD identity (with DN 'CN=S-1-5-21-1234567890-123456789-123456789-1234,CN=ForeignSecurityPrincipals,DC=d1,DC=example,DC=com'). This is an error generated to highlight the fact that at least one of the targeted groups in the D1 domain contains a member from a domain in a different forest. This indicates a situation where there are multiple AD forests with trust relationships. Whilst the single IDSP scenarios support following groups into domains within the same forest, they do not support following groups into domains in other forests. To synchronise with multiple domains across one or more forests it is necessary to use Hybrid IDSPs and, if required, modify any affected child IDSPs to ensure they ignore Foreign Security Principals. To ignore Foreign Security Principals, the IDSP will need to be modified using a text editor, and the foreignSecurityPrincipalHandling attribute added to the LDAPConfig tag with a value of ignore like so: <LDAPConfig ... foreignSecurityPrincipalHandling=\"ignore\" /> This will ignore any group members that come from another forest (instead of generating an error). If those members are actually required in SAS metadata then you will need to ensure that they are within a targeted group in the hybrid child IDSP that corresponds to that foreign domain.","title":"Foreign Security Principals"},{"location":"topics/canonical-tables/","text":"Using Canonical Tables As explained in Identity Sync Profiles & Process , and shown in the diagram below, the Metacoda Identity Sync Process normally uses three temporary SAS libraries for intermediate canonical and change tables as required by the SAS %MDU macros. These libraries are named IDS_SRC, IDS_TGT, and IDS_CHG, for source, target and change tables respectively. Unless otherwise specified in the Identity Sync Profile (IDSP), these libraries will be created as subdirectories of the temporary SAS WORK library/folder for the spawned SAS Workspace Server instance and automatically deleted then the workspace server instance is stopped when the process completes. Switching to Permanent Libraries Whilst the temporary nature of the IDS_SRC, IDS_TGT, and IDS_CHG libraries is appropriate for most scenarios, sometimes you might want to retain these tables after the identity sync process has completed. This might be for troubleshooting purposes or to re-use the tables for you own custom requirements. To make these libraries permanent, you need to select or create a directory in the file system of the SAS Workspace Server that will used for identity synchronisation, and ensure appropriate file system access controls to allow the workspace server operating system launch identity to create sub-directories and read/write SAS tables in those directories. Once you have a location, it can be specified by editing the IDSP in a text editor and adding a serverBaseDir attribute to the <Options> tag like so: <IdentitySyncProfile ...> ... <Options ... serverBaseDir=\u201cData/idsync\u201d /> ... </IdentitySyncProfile> The serverBaseDir value is a file system path that can be either relative or absolute. If a relative path is specified then it is relative to the SAS Application Server directory. For example, given the Data/idsync value specified above, if the SAS Application Server directory is /opt/sas/config/Lev1/SASApp then the following locations will be used for the three libraries: IDS_SRC: /opt/sas/config/Lev1/SASApp/Data/idsync/ids_src IDS_TGT: /opt/sas/config/Lev1/SASApp/Data/idsync/ids_tgt IDS_CHG: /opt/sas/config/Lev1/SASApp/Data/idsync/ids_chg The ids_src, ids_tgt, and ids_chg sub-directories will be automatically created if they do not already exist. Libraries and Tables IDS_SRC: Source Tables The IDS_SRC library contains tables that represent source/master identities for synchronisation. These usually contain users and groups extracted from Microsoft Active Directory. When using a Hybrid IDSP, the tables will contain combined identity information from all sources. Table Description IDS_SRC.AUTHDOMAIN Standard SAS canonical table: authentication domains. IDS_SRC.EMAIL Standard SAS canonical table: email addresses for users. IDS_SRC.GRPMEMS Standard SAS canonical table: group/role members. IDS_SRC.IDGRPS Standard SAS canonical table: groups/roles. IDS_SRC.IDGRPS_X Metacoda table: groups/roles with extra attributes (1). IDS_SRC.IDS_EXCEPTION Metacoda table: sync exceptions (2). IDS_SRC.LOCATION Standard SAS canonical table: physical addresses for users. IDS_SRC.LOGINS Standard SAS canonical table: logins/accounts for users & groups. IDS_SRC.PERSON Standard SAS canonical table: users. IDS_SRC.PERSON_X Metacoda table: users with extra attributes (1). IDS_SRC.PHONE Standard SAS canonical table: phone numbers for users. (1) The IDS_SRC.IDGRPS_X and IDS_SRC.PERSON_X tables are only populated if the IDSP LDAPConfig tag has the groupOtherAttrs and userOtherAttrs attributes specified respectively. These tables are copies of the corresponding IDS_SRC.IDGRPS and IDS_SRC.PERSON tables with additional X_ prefixed columns for each of the additional LDAP attributes specified. These extra attributes are not used in the normal Metacoda Identity Sync Process but may be of use in any custom processing requirements implemented in code hooks or elsewhere. (2) The IDS_SRC.IDS_EXCEPTION table is populated by the Metacoda Identity Sync Process from the sync exceptions specified in the IDSP (with <SyncException> tags). This table is provided to the standard SAS %MDUCMP macro during the identity comparison step, via the EXCEPTIONS parameter. IDS_TGT: Target Tables The IDS_TGT library contains tables that represent target identities for synchronisation: users and groups currently in SAS metadata. The contents of this library is generated by the use of the standard SAS %MDUEXTR macro. Table Description IDS_TGT.AUTHDOMAIN Standard SAS canonical table: authentication domains. IDS_TGT.EMAIL Standard SAS canonical table: email addresses for users. IDS_TGT.EMAIL_INFO Standard SAS canonical table: email addresses for users (additional info). IDS_TGT.GROUP_INFO Standard SAS canonical table: groups (additional info). IDS_TGT.GROUPLOGINS_INFO Standard SAS canonical table: logins/accounts for groups (additional info). IDS_TGT.GROUPMEMGROUPS_INFO Standard SAS canonical table: group/role group members (additional info). IDS_TGT.GROUPMEMPERSONS_INFO Standard SAS canonical table: group/role user members (additional info). IDS_TGT.GRPMEMS Standard SAS canonical table: group/role members. IDS_TGT.IDGRPS Standard SAS canonical table: groups/role. IDS_TGT.LOCATION Standard SAS canonical table: physical addresses for users. IDS_TGT.LOCATION_INFO Standard SAS canonical table: physical addresses for users (additional info). IDS_TGT.LOGINS Standard SAS canonical table: logins/accounts for users & groups. IDS_TGT.LOGINS_INFO Standard SAS canonical table: logins/accounts for users (additional info). IDS_TGT.PERSON Standard SAS canonical table: users. IDS_TGT.PERSON_INFO Standard SAS canonical table: users (additional info). IDS_TGT.PHONE Standard SAS canonical table: phone numbers for users. IDS_TGT.PHONE_INFO Standard SAS canonical table: phone numbers for users (additional info). IDS_CHG: Change Tables The IDS_CHG library contains tables that represent changes required to target (SAS metadata) identities to bring them back in sync with the sources identities. The contents of this library is generated by the use of the standard SAS %MDUCMP macro and may be further customized by post-processing if the tag-delete feature has been enabled in the IDSP. Table Description IDS_CHG.AUTHDOMAIN_ADD Standard SAS change table: authentication domains to be added. IDS_CHG.AUTHDOMAIN_DELETE Standard SAS change table: authentication domains to be deleted. IDS_CHG.AUTHDOMAIN_SUMMARY Standard SAS change table: summary of authentication domains. IDS_CHG.AUTHDOMAIN_UPDATE Standard SAS change table: authentication domains to be updated. IDS_CHG.EMAIL_ADD Standard SAS change table: user email addresses to be added. IDS_CHG.EMAIL_DELETE Standard SAS change table: user email addresses to be deleted. IDS_CHG.EMAIL_UPDATE Standard SAS change table: user email addresses to be updated. IDS_CHG.GRPMEMS_ADD Standard SAS change table: members to be added to groups/roles. IDS_CHG.GRPMEMS_DELETE Standard SAS change table: members to be removed from groups/roles IDS_CHG.IDGRPS_ADD Standard SAS change table: groups to be added. IDS_CHG.IDGRPS_DELETE Standard SAS change table: groups to be deleted. IDS_CHG.IDGRPS_SUMMARY Standard SAS change table: summary of groups. IDS_CHG.IDGRPS_UPDATE Standard SAS change table: groups to be updated. IDS_CHG.IDS_ERROR A table populated if changes are not valid. See the SAS %MDUCHGV macro ERRORSDS parameter. IDS_CHG.IDS_FAILED_OBJS A table populated if changes failed to be applied to SAS metadata. See the SAS %MDUCHGLB macro FAILEDOBJS parameter. IDS_CHG.LOCATION_ADD Standard SAS change table: user physical addresses to be added. IDS_CHG.LOCATION_DELETE Standard SAS change table: user physical addresses to be deleted. IDS_CHG.LOCATION_UPDATE Standard SAS change table: user physical addresses to be updated. IDS_CHG.LOGINS_ADD Standard SAS change table: user & group logins/accounts to be added. IDS_CHG.LOGINS_DELETE Standard SAS change table: user & group logins/accounts to be deleted. IDS_CHG.PERSON_ADD Standard SAS change table: users to be added. IDS_CHG.PERSON_DELETE Standard SAS change table: users to be deleted. IDS_CHG.PERSON_SUMMARY Standard SAS change table: summary of users. IDS_CHG.PERSON_UPDATE Standard SAS change table: users to be updated. IDS_CHG.PHONE_ADD Standard SAS change table: user phone numbers to be added. IDS_CHG.PHONE_DELETE Standard SAS change table: user phone numbers to be deleted. IDS_CHG.PHONE_UPDATE Standard SAS change table: user phone numbers to be updated. If the IDSP <Options> tag has the tagDeletedIdentities attribute set to true , indicating tag-deletion has been requested, then these change tables will be post-processed by the Metacoda Identity Sync Process to convert user and group deletions into tag-deletions (updates). Tag deletion, is a reversible process, that marks SAS users and groups as ready to be manually deleted, and effectively disables them without destroying other metadata relationships they may have. When users and groups are tag-deleted: Tag deleted User and Group display names are prefixed with text as specified in the IDSP <Options> tag deletedIdentityTag attribute so that they sort together (e.g. \"Bob\" becomes \"[DELETED] Bob\"). Tag deleted User and Group logins are removed, so that nobody can login to the SAS platform as those identities. Tag deleted User and Group role and group memberships are removed. These tag deletions will be seen as appropriate modifications to the change tables above. For example this includes, but is not limited to, the IDS_CHG.PERSON_DELETE, IDS_CHG.IDGRPS_DELETE being emptied and corresponding rows added to the IDS_CHG.PERSON_UPDATE, IDS_CHG.IDGRPS_UPDATE tables. The IDS_CHG library folder can also contain PROC METADATA XML request and response files if the <Options> tag has debug set to true.","title":"Using Canonical Tables"},{"location":"topics/canonical-tables/#using-canonical-tables","text":"As explained in Identity Sync Profiles & Process , and shown in the diagram below, the Metacoda Identity Sync Process normally uses three temporary SAS libraries for intermediate canonical and change tables as required by the SAS %MDU macros. These libraries are named IDS_SRC, IDS_TGT, and IDS_CHG, for source, target and change tables respectively. Unless otherwise specified in the Identity Sync Profile (IDSP), these libraries will be created as subdirectories of the temporary SAS WORK library/folder for the spawned SAS Workspace Server instance and automatically deleted then the workspace server instance is stopped when the process completes.","title":"Using Canonical Tables"},{"location":"topics/canonical-tables/#switching-to-permanent-libraries","text":"Whilst the temporary nature of the IDS_SRC, IDS_TGT, and IDS_CHG libraries is appropriate for most scenarios, sometimes you might want to retain these tables after the identity sync process has completed. This might be for troubleshooting purposes or to re-use the tables for you own custom requirements. To make these libraries permanent, you need to select or create a directory in the file system of the SAS Workspace Server that will used for identity synchronisation, and ensure appropriate file system access controls to allow the workspace server operating system launch identity to create sub-directories and read/write SAS tables in those directories. Once you have a location, it can be specified by editing the IDSP in a text editor and adding a serverBaseDir attribute to the <Options> tag like so: <IdentitySyncProfile ...> ... <Options ... serverBaseDir=\u201cData/idsync\u201d /> ... </IdentitySyncProfile> The serverBaseDir value is a file system path that can be either relative or absolute. If a relative path is specified then it is relative to the SAS Application Server directory. For example, given the Data/idsync value specified above, if the SAS Application Server directory is /opt/sas/config/Lev1/SASApp then the following locations will be used for the three libraries: IDS_SRC: /opt/sas/config/Lev1/SASApp/Data/idsync/ids_src IDS_TGT: /opt/sas/config/Lev1/SASApp/Data/idsync/ids_tgt IDS_CHG: /opt/sas/config/Lev1/SASApp/Data/idsync/ids_chg The ids_src, ids_tgt, and ids_chg sub-directories will be automatically created if they do not already exist.","title":"Switching to Permanent Libraries"},{"location":"topics/canonical-tables/#libraries-and-tables","text":"","title":"Libraries and Tables"},{"location":"topics/canonical-tables/#ids_src-source-tables","text":"The IDS_SRC library contains tables that represent source/master identities for synchronisation. These usually contain users and groups extracted from Microsoft Active Directory. When using a Hybrid IDSP, the tables will contain combined identity information from all sources. Table Description IDS_SRC.AUTHDOMAIN Standard SAS canonical table: authentication domains. IDS_SRC.EMAIL Standard SAS canonical table: email addresses for users. IDS_SRC.GRPMEMS Standard SAS canonical table: group/role members. IDS_SRC.IDGRPS Standard SAS canonical table: groups/roles. IDS_SRC.IDGRPS_X Metacoda table: groups/roles with extra attributes (1). IDS_SRC.IDS_EXCEPTION Metacoda table: sync exceptions (2). IDS_SRC.LOCATION Standard SAS canonical table: physical addresses for users. IDS_SRC.LOGINS Standard SAS canonical table: logins/accounts for users & groups. IDS_SRC.PERSON Standard SAS canonical table: users. IDS_SRC.PERSON_X Metacoda table: users with extra attributes (1). IDS_SRC.PHONE Standard SAS canonical table: phone numbers for users. (1) The IDS_SRC.IDGRPS_X and IDS_SRC.PERSON_X tables are only populated if the IDSP LDAPConfig tag has the groupOtherAttrs and userOtherAttrs attributes specified respectively. These tables are copies of the corresponding IDS_SRC.IDGRPS and IDS_SRC.PERSON tables with additional X_ prefixed columns for each of the additional LDAP attributes specified. These extra attributes are not used in the normal Metacoda Identity Sync Process but may be of use in any custom processing requirements implemented in code hooks or elsewhere. (2) The IDS_SRC.IDS_EXCEPTION table is populated by the Metacoda Identity Sync Process from the sync exceptions specified in the IDSP (with <SyncException> tags). This table is provided to the standard SAS %MDUCMP macro during the identity comparison step, via the EXCEPTIONS parameter.","title":"IDS_SRC: Source Tables"},{"location":"topics/canonical-tables/#ids_tgt-target-tables","text":"The IDS_TGT library contains tables that represent target identities for synchronisation: users and groups currently in SAS metadata. The contents of this library is generated by the use of the standard SAS %MDUEXTR macro. Table Description IDS_TGT.AUTHDOMAIN Standard SAS canonical table: authentication domains. IDS_TGT.EMAIL Standard SAS canonical table: email addresses for users. IDS_TGT.EMAIL_INFO Standard SAS canonical table: email addresses for users (additional info). IDS_TGT.GROUP_INFO Standard SAS canonical table: groups (additional info). IDS_TGT.GROUPLOGINS_INFO Standard SAS canonical table: logins/accounts for groups (additional info). IDS_TGT.GROUPMEMGROUPS_INFO Standard SAS canonical table: group/role group members (additional info). IDS_TGT.GROUPMEMPERSONS_INFO Standard SAS canonical table: group/role user members (additional info). IDS_TGT.GRPMEMS Standard SAS canonical table: group/role members. IDS_TGT.IDGRPS Standard SAS canonical table: groups/role. IDS_TGT.LOCATION Standard SAS canonical table: physical addresses for users. IDS_TGT.LOCATION_INFO Standard SAS canonical table: physical addresses for users (additional info). IDS_TGT.LOGINS Standard SAS canonical table: logins/accounts for users & groups. IDS_TGT.LOGINS_INFO Standard SAS canonical table: logins/accounts for users (additional info). IDS_TGT.PERSON Standard SAS canonical table: users. IDS_TGT.PERSON_INFO Standard SAS canonical table: users (additional info). IDS_TGT.PHONE Standard SAS canonical table: phone numbers for users. IDS_TGT.PHONE_INFO Standard SAS canonical table: phone numbers for users (additional info).","title":"IDS_TGT: Target Tables"},{"location":"topics/canonical-tables/#ids_chg-change-tables","text":"The IDS_CHG library contains tables that represent changes required to target (SAS metadata) identities to bring them back in sync with the sources identities. The contents of this library is generated by the use of the standard SAS %MDUCMP macro and may be further customized by post-processing if the tag-delete feature has been enabled in the IDSP. Table Description IDS_CHG.AUTHDOMAIN_ADD Standard SAS change table: authentication domains to be added. IDS_CHG.AUTHDOMAIN_DELETE Standard SAS change table: authentication domains to be deleted. IDS_CHG.AUTHDOMAIN_SUMMARY Standard SAS change table: summary of authentication domains. IDS_CHG.AUTHDOMAIN_UPDATE Standard SAS change table: authentication domains to be updated. IDS_CHG.EMAIL_ADD Standard SAS change table: user email addresses to be added. IDS_CHG.EMAIL_DELETE Standard SAS change table: user email addresses to be deleted. IDS_CHG.EMAIL_UPDATE Standard SAS change table: user email addresses to be updated. IDS_CHG.GRPMEMS_ADD Standard SAS change table: members to be added to groups/roles. IDS_CHG.GRPMEMS_DELETE Standard SAS change table: members to be removed from groups/roles IDS_CHG.IDGRPS_ADD Standard SAS change table: groups to be added. IDS_CHG.IDGRPS_DELETE Standard SAS change table: groups to be deleted. IDS_CHG.IDGRPS_SUMMARY Standard SAS change table: summary of groups. IDS_CHG.IDGRPS_UPDATE Standard SAS change table: groups to be updated. IDS_CHG.IDS_ERROR A table populated if changes are not valid. See the SAS %MDUCHGV macro ERRORSDS parameter. IDS_CHG.IDS_FAILED_OBJS A table populated if changes failed to be applied to SAS metadata. See the SAS %MDUCHGLB macro FAILEDOBJS parameter. IDS_CHG.LOCATION_ADD Standard SAS change table: user physical addresses to be added. IDS_CHG.LOCATION_DELETE Standard SAS change table: user physical addresses to be deleted. IDS_CHG.LOCATION_UPDATE Standard SAS change table: user physical addresses to be updated. IDS_CHG.LOGINS_ADD Standard SAS change table: user & group logins/accounts to be added. IDS_CHG.LOGINS_DELETE Standard SAS change table: user & group logins/accounts to be deleted. IDS_CHG.PERSON_ADD Standard SAS change table: users to be added. IDS_CHG.PERSON_DELETE Standard SAS change table: users to be deleted. IDS_CHG.PERSON_SUMMARY Standard SAS change table: summary of users. IDS_CHG.PERSON_UPDATE Standard SAS change table: users to be updated. IDS_CHG.PHONE_ADD Standard SAS change table: user phone numbers to be added. IDS_CHG.PHONE_DELETE Standard SAS change table: user phone numbers to be deleted. IDS_CHG.PHONE_UPDATE Standard SAS change table: user phone numbers to be updated. If the IDSP <Options> tag has the tagDeletedIdentities attribute set to true , indicating tag-deletion has been requested, then these change tables will be post-processed by the Metacoda Identity Sync Process to convert user and group deletions into tag-deletions (updates). Tag deletion, is a reversible process, that marks SAS users and groups as ready to be manually deleted, and effectively disables them without destroying other metadata relationships they may have. When users and groups are tag-deleted: Tag deleted User and Group display names are prefixed with text as specified in the IDSP <Options> tag deletedIdentityTag attribute so that they sort together (e.g. \"Bob\" becomes \"[DELETED] Bob\"). Tag deleted User and Group logins are removed, so that nobody can login to the SAS platform as those identities. Tag deleted User and Group role and group memberships are removed. These tag deletions will be seen as appropriate modifications to the change tables above. For example this includes, but is not limited to, the IDS_CHG.PERSON_DELETE, IDS_CHG.IDGRPS_DELETE being emptied and corresponding rows added to the IDS_CHG.PERSON_UPDATE, IDS_CHG.IDGRPS_UPDATE tables. The IDS_CHG library folder can also contain PROC METADATA XML request and response files if the <Options> tag has debug set to true.","title":"IDS_CHG: Change Tables"},{"location":"topics/exclusions/","text":"Exclusions & Exceptions There are two ways to prevent changes for specified users and groups in SAS metadata when using the Metacoda Identity Sync Process: Exclusions and Exceptions. Both methods have the same goals: prevent specific users or groups from being added to SAS metadata; and avoid updating or deleting specific SAS identity metadata. There are however some differences in implementation that may make you either choose one of the methods or a combination of the two. As highlighted in the diagram below, exclusions are handled during the Java-based source identity extraction step, whereas exceptions are handled during the SAS language based source/target comparison step. More specifically, exceptions are handled using the standard SAS %MDUCMP macro's support for an exceptions table. Exclusions Exclusions are used to prevent certain source identities, such as Active Directory (AD) users and groups, from getting to the canonical tables and being considered in the comparison with existing target SAS metadata identities. Exclusions are specified in the Identity Sync Profile (IDSP) and can be added either using the Identity Sync Profile Wizard or by editing the IDSP XML directly. There are several reasons why you might want to exclude identities at this stage: You are using a sync-basis that targets all users/groups under a certain Organizational Unit (OU) in the directory, but need to exclude some users/groups that are not SAS platform related. You are using a sync-basis that targets selected groups and their members but need to exclude some user/group members that are not SAS platform related. You might have service identities that need to be ignored and, as group members or descendants of an OU, would otherwise be targeted for synchronisation. One of the key ways that exclusions differ from exceptions is in the handling of excluded group members. During source identity extraction, if a group is excluded then its members are ignored. This includes nested groups and their members too. A member of an excluded group will then only be included if it is either explicitly included in the IDSP, or is a member of another group which has not been excluded. This differs from exceptions in that if a group is ignored during exception processing then it has no bearing on that groups members (unless the filter condition is such that it affects some members too). This difference in the handling of exclusions and exceptions can be used beneficially. If you want to ignore a group and its members use an exclusion. If you want to ignore the group but keep its members use an exception instead. Another difference is in support for wildcards. Exclusions target a specific identity without support for wildcards. Exceptions, as SAS WHERE clause expressions, support the use of wildcards to ignore a set of identities based on similarities in their names for example. If you need wildcard support choose exceptions over exclusions. The following fragment shows how user and group exclusions are represented in an IDSP: <IdentitySyncProfile ...> ... <GroupSync ...> ... <ExcludedGroups> <Group name=\"Group1\" dn=\"CN=Group1,CN=Users,DC=corp,DC=example,DC=com\" guid=\"4db9ff77-2096-4748-b0ce-7b0f3aa7942d\"/> <Group name=\"Group2\" dn=\"CN=Group2,CN=Users,DC=corp,DC=example,DC=com\" guid=\"acbf94df-d5ac-46ec-be3c-feb5880b2be3\"/> </ExcludedGroups> ... </GroupSync> <UserSync ... excludeDisabledAccounts=\"false\"> <ExcludedUsers> <User name=\"User1\" dn=\"CN=User1,CN=Users,DC=corp,DC=example,DC=com\" guid=\"4c1f064a-865e-4359-b9b6-6580b3dfc80f\"/> <User name=\"User2\" dn=\"CN=User2,CN=Users,DC=corp,DC=example,DC=com\" guid=\"34be56af-c639-4ac7-96f5-11ce0690ebfb\"/> ... </ExcludedUsers> </UserSync> ... </IdentitySyncProfile> Group exclusions are specified using <Group> tags inside an <ExcludedGroups> tag in the main <GroupSync> tag. Similarly user exclusions are specified as <User> tags inside the <ExcludedUser> tag in the main <UserSync> tag. The users and groups are identified primarily via the guid attribute value. If a guid is not specified, or an identity with that guid cannot be located, the dn attribute value, if specified, is used to locate the source identity instead. If a source identity cannot be found by guid or dn a warning is logged and the exclusion ignored. The name attr is not used for locating identities. It is primarily used to make it easier for people to locate the correct tag when editing an IDSP. After an excluded identity has been found, any differences between the directory and IDSP with respect to guid, dn and name attributes is logged. Any differences in guid values are logged as warnings (because it is unexpected and may well be a copy/paste error). By default, any Active Directory users whose accounts have been marked as disabled in AD are still extracted (given they still exist in AD). If you want to automatically exclude those users you can add excludeDisabledAccounts=\"false\" to the <UserSync> tag. Those disabled user accounts will no longer be loaded into the canonical tables and, if previously linked with SAS identities, will get deleted or tag-deleted. Support for the excludeDisabledAccounts attribute was added in Metacoda Plug-ins version 6.0 R4. It can also be specified in the Identity Sync Profile Wizard. Exceptions As described above, exceptions provide a way to ignore specified identity metadata during the source (AD) and target (SAS metadata) identity comparison step. This is a standard feature of the SAS %MDUCMP macro which has a parameter to accept a table of exceptions. You can also use this exceptions feature in the Metacoda Identity Sync Plug-in. When used inside SAS Management Console, the Identity Sync Plug-in allows you to interactively select identity metadata in the changes preview and add corresponding rows to an exceptions table. You can also view the contents of the exceptions table and remove any unwanted rows. The exceptions table is initially populated with rows to ignore many well-known pre-defined SAS users, groups, and roles (in case you happen to have external identities with the same names). Any changes you make to the exceptions table in the Metacoda Identity Sync Plug-in are stored inside the IDSP. The Metacoda Identity Sync Plug-in does not yet provide the ability to edit sync exceptions (other than to add or delete them). If you want to edit an existing exception, such as to change the filter condition or add a wildcard filter, it needs to be done by editing the IDSP XML in a text editor. The fragment below shows how exceptions are stored in an IDSP: <IdentitySyncProfile ...> ... <SyncExceptions> <SyncException tableName=\"IdGrps\" filter=\"upcase(keyid) = &quot;a2c48426-1538-4a41-a4c6-635eb191f15d&quot;\"/> <SyncException tableName=\"IdGrps\" filter=\"upcase(name) = &quot;TEST_GROUP&quot;\"/> <SyncException tableName=\"Person\" filter=\"upcase(name) = &quot;TEST&quot;\"/> <SyncException tableName=\"Person\" filter=\"upcase(name) like &quot;SAS%&quot;\"/> ... </SyncExceptions> </IdentitySyncProfile> Each <SyncException> tag is used to populate a row in the IDS_SRC.IDS_EXCEPTION table, as provided to the %MDUCMP macro, with the tableName and filter attribute values inserted into table columns with the same names. Notice that the SAS WHERE expressions in the filter attributes need to be appropriately XML encoded. The fragment above has four exceptions to: ignore a group by keyId value (an AD objectGUID in this case) ignore a group by name (TEST_GROUP) ignore a user by name (TEST) ignore a set of users using a wildcard (names that start with SAS) For more information on the exceptions table see the Details section in the %MDUCMP page of the User Import Macros appendix in the SAS\u00ae 9.4 Intelligence Platform: Security Administration Guide .","title":"Exclusions & Exceptions"},{"location":"topics/exclusions/#exclusions-exceptions","text":"There are two ways to prevent changes for specified users and groups in SAS metadata when using the Metacoda Identity Sync Process: Exclusions and Exceptions. Both methods have the same goals: prevent specific users or groups from being added to SAS metadata; and avoid updating or deleting specific SAS identity metadata. There are however some differences in implementation that may make you either choose one of the methods or a combination of the two. As highlighted in the diagram below, exclusions are handled during the Java-based source identity extraction step, whereas exceptions are handled during the SAS language based source/target comparison step. More specifically, exceptions are handled using the standard SAS %MDUCMP macro's support for an exceptions table.","title":"Exclusions &amp; Exceptions"},{"location":"topics/exclusions/#exclusions","text":"Exclusions are used to prevent certain source identities, such as Active Directory (AD) users and groups, from getting to the canonical tables and being considered in the comparison with existing target SAS metadata identities. Exclusions are specified in the Identity Sync Profile (IDSP) and can be added either using the Identity Sync Profile Wizard or by editing the IDSP XML directly. There are several reasons why you might want to exclude identities at this stage: You are using a sync-basis that targets all users/groups under a certain Organizational Unit (OU) in the directory, but need to exclude some users/groups that are not SAS platform related. You are using a sync-basis that targets selected groups and their members but need to exclude some user/group members that are not SAS platform related. You might have service identities that need to be ignored and, as group members or descendants of an OU, would otherwise be targeted for synchronisation. One of the key ways that exclusions differ from exceptions is in the handling of excluded group members. During source identity extraction, if a group is excluded then its members are ignored. This includes nested groups and their members too. A member of an excluded group will then only be included if it is either explicitly included in the IDSP, or is a member of another group which has not been excluded. This differs from exceptions in that if a group is ignored during exception processing then it has no bearing on that groups members (unless the filter condition is such that it affects some members too). This difference in the handling of exclusions and exceptions can be used beneficially. If you want to ignore a group and its members use an exclusion. If you want to ignore the group but keep its members use an exception instead. Another difference is in support for wildcards. Exclusions target a specific identity without support for wildcards. Exceptions, as SAS WHERE clause expressions, support the use of wildcards to ignore a set of identities based on similarities in their names for example. If you need wildcard support choose exceptions over exclusions. The following fragment shows how user and group exclusions are represented in an IDSP: <IdentitySyncProfile ...> ... <GroupSync ...> ... <ExcludedGroups> <Group name=\"Group1\" dn=\"CN=Group1,CN=Users,DC=corp,DC=example,DC=com\" guid=\"4db9ff77-2096-4748-b0ce-7b0f3aa7942d\"/> <Group name=\"Group2\" dn=\"CN=Group2,CN=Users,DC=corp,DC=example,DC=com\" guid=\"acbf94df-d5ac-46ec-be3c-feb5880b2be3\"/> </ExcludedGroups> ... </GroupSync> <UserSync ... excludeDisabledAccounts=\"false\"> <ExcludedUsers> <User name=\"User1\" dn=\"CN=User1,CN=Users,DC=corp,DC=example,DC=com\" guid=\"4c1f064a-865e-4359-b9b6-6580b3dfc80f\"/> <User name=\"User2\" dn=\"CN=User2,CN=Users,DC=corp,DC=example,DC=com\" guid=\"34be56af-c639-4ac7-96f5-11ce0690ebfb\"/> ... </ExcludedUsers> </UserSync> ... </IdentitySyncProfile> Group exclusions are specified using <Group> tags inside an <ExcludedGroups> tag in the main <GroupSync> tag. Similarly user exclusions are specified as <User> tags inside the <ExcludedUser> tag in the main <UserSync> tag. The users and groups are identified primarily via the guid attribute value. If a guid is not specified, or an identity with that guid cannot be located, the dn attribute value, if specified, is used to locate the source identity instead. If a source identity cannot be found by guid or dn a warning is logged and the exclusion ignored. The name attr is not used for locating identities. It is primarily used to make it easier for people to locate the correct tag when editing an IDSP. After an excluded identity has been found, any differences between the directory and IDSP with respect to guid, dn and name attributes is logged. Any differences in guid values are logged as warnings (because it is unexpected and may well be a copy/paste error). By default, any Active Directory users whose accounts have been marked as disabled in AD are still extracted (given they still exist in AD). If you want to automatically exclude those users you can add excludeDisabledAccounts=\"false\" to the <UserSync> tag. Those disabled user accounts will no longer be loaded into the canonical tables and, if previously linked with SAS identities, will get deleted or tag-deleted. Support for the excludeDisabledAccounts attribute was added in Metacoda Plug-ins version 6.0 R4. It can also be specified in the Identity Sync Profile Wizard.","title":"Exclusions"},{"location":"topics/exclusions/#exceptions","text":"As described above, exceptions provide a way to ignore specified identity metadata during the source (AD) and target (SAS metadata) identity comparison step. This is a standard feature of the SAS %MDUCMP macro which has a parameter to accept a table of exceptions. You can also use this exceptions feature in the Metacoda Identity Sync Plug-in. When used inside SAS Management Console, the Identity Sync Plug-in allows you to interactively select identity metadata in the changes preview and add corresponding rows to an exceptions table. You can also view the contents of the exceptions table and remove any unwanted rows. The exceptions table is initially populated with rows to ignore many well-known pre-defined SAS users, groups, and roles (in case you happen to have external identities with the same names). Any changes you make to the exceptions table in the Metacoda Identity Sync Plug-in are stored inside the IDSP. The Metacoda Identity Sync Plug-in does not yet provide the ability to edit sync exceptions (other than to add or delete them). If you want to edit an existing exception, such as to change the filter condition or add a wildcard filter, it needs to be done by editing the IDSP XML in a text editor. The fragment below shows how exceptions are stored in an IDSP: <IdentitySyncProfile ...> ... <SyncExceptions> <SyncException tableName=\"IdGrps\" filter=\"upcase(keyid) = &quot;a2c48426-1538-4a41-a4c6-635eb191f15d&quot;\"/> <SyncException tableName=\"IdGrps\" filter=\"upcase(name) = &quot;TEST_GROUP&quot;\"/> <SyncException tableName=\"Person\" filter=\"upcase(name) = &quot;TEST&quot;\"/> <SyncException tableName=\"Person\" filter=\"upcase(name) like &quot;SAS%&quot;\"/> ... </SyncExceptions> </IdentitySyncProfile> Each <SyncException> tag is used to populate a row in the IDS_SRC.IDS_EXCEPTION table, as provided to the %MDUCMP macro, with the tableName and filter attribute values inserted into table columns with the same names. Notice that the SAS WHERE expressions in the filter attributes need to be appropriately XML encoded. The fragment above has four exceptions to: ignore a group by keyId value (an AD objectGUID in this case) ignore a group by name (TEST_GROUP) ignore a user by name (TEST) ignore a set of users using a wildcard (names that start with SAS) For more information on the exceptions table see the Details section in the %MDUCMP page of the User Import Macros appendix in the SAS\u00ae 9.4 Intelligence Platform: Security Administration Guide .","title":"Exceptions"},{"location":"topics/idsp/","text":"Identity Sync Profiles & Process Metacoda Identity Sync Profiles (IDSPs) are XML files, with a file extension of .idsp, that contain configuration information as required for the Metacoda Identity Sync Plug-in to synchronise target SAS\u00ae metadata identities (users and groups) with source identities, such as users and groups from Microsoft Active Directory. The Metacoda Identity Sync Plug-in can be used interactively, within the SAS Management Console, to manually preview any changes before applying them to SAS metadata. Alternatively, Identity Sync Profiles can also be processed by the Metacoda Plug-ins Batch Interface so that automatic identity synchronisations can be regularly scheduled. IDSPs are usually created by using the Metacoda Identity Sync Profile Wizard within SAS Management Console. This wizard only provides access to the most commonly used configurable elements. To access to some of the more advanced features you will need to edit the IDSP XML directly. Manual edits will be preserved if you subsequently use the wizard to load, modify, and save the IDSP file. If you manually edit the IDSP while it is still open in the Identity Sync Plug-in you will need to re-open it to pick up those manual changes. This documentation and the associated samples are provided to show how some of the these features are represented in the IDSP XML in case you need to use them. Identity Sync Process Overview At the heart of the Metacoda Identity Sync process are the well-known and time-proven SAS %MDU macros as documented in the User Import Macros appendix of the SAS 9.4 Intelligence Platform: Security Administration Guide . The Metacoda Identity Sync Plug-in wraps a further framework around these macros including: A SAS Management Console hosted point and click interface to create and use configurations (IDSPs), and interactively preview and apply identity changes to SAS metadata; A batch interface for the scheduled automatic application of identity changes to SAS metadata; A custom Java-based process that provides a variety of methods to target identities from a Microsoft Active Directory source, including handling of the following: Deeply nested groups Paginated queries to support extraction of large numbers of identities and groups with more than 1,500 member. Support for following group members into other domains in the same forest. Support for combining identities from multiple identity sources, such as domains in multiple AD forests, through Hybrid IDSPs. Support for sourcing identities from an Identity Sync Export (IDSX) file, an XML format that can be used for identity sync between different SAS environments, or from other identity providers. The generation of Audit Reports to document the use of the identity sync process over time; Code hooks for customisation of the identity sync process. The following sections on basic and hybrid IDSPs provide some more detail on this process. Single (Basic) Identity Sync Profile Most implementation use a single basic IDSP that targets a single provider of identities such as a single Microsoft Active Directory (AD) domain. The diagram below illustrates this process (which is controlled by the contents of the IDSP): Step 0 Initialisation : A SAS Workspace Server is spawned, and 3 temporary libraries (IDS_SRC, IDS_TGT, IDS_CHG) are configured to house the canonical and change tables as required by the SAS %MDU macros. Empty canonical tables are created using the standard SAS %MDUIMPC macro. Step 1 Source Extract : A custom Java-based process connects to an AD server and extracts information for the targeted identities (users and groups) as specified in the IDSP. Step 2 Source Upload : The source identities extracted in step 1 are uploaded into tables in the IDS_SRC library. Step 3 Target Extract : The standard SAS %MDUEXTR macro is used to extract target identities from the SAS metadata server into canonical tables in the IDS_TGT library. Step 4 Compare : The standard SAS %MDUCMP macro is used to compare source identities from the IDS_SRC library with target identities from the IDS_TGT library. Any sync exceptions specified in the IDSP are also provided to the macro so that those identities can be ignored as required. Any changes that need to be applied to the target SAS identities to get them back into sync with the source AD identities will be generated as change tables the IDS_CHG library. If tag-deletion has been specified in the IDSP then Metacoda augments this process by converting any user/group deletions into updates to represent tag-deletes. Step 5 Validate : The standard SAS %MDUCHGV macro is used to valid any changes present in IDS_CHG libraries change tables. If any validation errors are detected the identity sync process is aborted. Step 6 Apply Changes : If there are changes to be applied, and no validation errors, then the standard SAS %MDUCHGLB macro is used to apply changes to SAS metadata using the change tables in the IDS_CHG library. A basic IDSP to implement synchronisation with a single Active Directory server has the following general structure: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <IdentitySyncProfile ...> <IdentitySource type=\"activeDirectoryServer\"/> <LDAPConfig ... /> <GroupSync ...> <IncludedGroups> <Group name=\"Group1\" ... /> <Group name=\"Group2\" ... /> ... </IncludedGroups> </GroupSync> <UserSync ... /> <Options ... /> <SyncExceptions> <SyncException ... /> ... </SyncExceptions> </IdentitySyncProfile> The <IdentitySource> tag indicates the source for identities, in this case AD. The <LDAPConfig> contains details of how to connect to AD: host name, port, protocol, credentials, whether to use encryption, base DNs and filters for search, attribute mappings etc. The <GroupSync> tag specifies the basis for identifying targeted groups, excluded groups, and general group related options. The <UserSync> tag specifies the basis for identifying targeted users, excluded users, and general user related options. The <Options> tag has some generic options for the sync process. The <SyncExceptions> tag is used to specify any identities to be ignored. See https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-basic.idsp for a complete example. Multiple (Hybrid) Identity Sync Profiles In more complex environments there might be a need to synchronise SAS identities from multiple independant sources. Hybrid Identity Sync Profiles, available since Metacoda Plug-ins 6.01 R1, can be used in situations where is not possible to obtain all required SAS identities using a single Identity Sync Profile. If you were to try to simply use multiple IDSPs in sequence, the identities that were added by the first IDSP would be deleted by the processing of the second IDSP. This is why we need a hybrid IDSP that collects all of the identities from multiple sources before it attempts to synchronise them with SAS metadata. A hybrid IDSP is structured as a parent, or wrapper, IDSP that references individual child, or included, IDSPs like so: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <IdentitySyncProfile ...> <IdentitySource type=\"hybrid\"/> <IncludeIdentitySyncProfile path=\"d1.idsp\"/> <IncludeIdentitySyncProfile path=\"d2.idsp\"/> ... <Options ... /> <SyncExceptions> <SyncException ... /> ... </SyncExceptions> </IdentitySyncProfile> In the IDSP above, the <IdentitySource> tag identifies it as a Hybrid IDSP, and the multiple <IncludeIdentitySyncProfile> tags identity the other child IDSPs to be used to source identities. You can have as many <IncludeIdentitySyncProfile> tags as necessary. The Identity Sync Profile Wizard cannot currently be used to create a Hybrid IDSP - it must be created using an XML or text editor using the above, or one of the samples in this repository, as a template. The individual included child IDSPs can be generated using the wizard, although you would not normally apply the changes from a child IDSP on its own except when testing it in a sandpit environment. The Identity Sync Process differs slightly with Hybrid IDSPs. The diagram below illustrates this, where a Hybrid IDSP includes 2 child IDSPs, d1 and d2 : Step 0 Initialisation : A SAS Workspace Server is spawned, the IDS_SRC, IDS_TGT, and IDS_CHG temporary libraries are configured, and empty canonical tables added using the standard SAS %MDUIMPC macro. Step 1 Source #1 Extract (d1) : Source identities are fetched from the first AD server as specified in the first child IDSP d1.idsp. Step 2 Source #1 Upload (d1) : The first batch of source identities from step 1 are uploaded and appended to the IDS_SRC tables. Step 3 Source #2 Extract (d2) : Source identities are fetched from the second AD server as specified in the second child IDSP d2.idsp. Step 4 Source #2 Upload (d2) : The second batch of source identities from step 3 are uploaded and appended to the IDS_SRC tables. Step 5 Target Extract : The standard SAS %MDUEXTR macro is used to extract target identities from the SAS metadata server into canonical tables in the IDS_TGT library. Step 6 Compare : The standard SAS %MDUCMP macro is used to compare the combined set of source identities from the IDS_SRC library with target identities from the IDS_TGT library to generate change tables the IDS_CHG library. Any sync exceptions specified in the Hybrid IDSP are also provided to the macro so that those identities can be ignored as required. Any sync exceptions specified in the child IDSPs are ignored. If tag-deletion has been specified in the Hybrid IDSP then Metacoda augments this process by converting any user/group deletions into updates to represent tag-deletes. Step 7 Validate : The standard SAS %MDUCHGV macro is used to valid any changes present in IDS_CHG libraries change tables. If any validation errors are detected the identity sync process is aborted. Step 8 Apply Changes : If there are changes to be applied, and no validation errors, then the standard SAS %MDUCHGLB macro is used to apply changes to SAS metadata using the change tables in the IDS_CHG library. Some other noteworthy differences in Hybrid IDSP processing when compared to single IDSP processing: Any <Options> or <SyncExceptions> tags, and any code hooks except <PreSourceExtractCode> and <PostSourceExtractCode> , that are specified in child IDSPs are ignored. <Options> and <SyncExceptions> tags are only considered when specified in the Hybrid IDSP. If <PreSourceExtractCode> and <PostSourceExtractCode> code hooks are specified in the Hybrid IDSP then they are processed before and after all child IDSPs source identity extractions. Any <LDAPConfig> , <IDSXFileConfig> , <GroupSync> , and <UserSync> tags specified in the Hybrid IDSP are ignored. All code hooks in the Hybrid IDSP are processed. See https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid.idsp , https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d1.idsp , and https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d2.idsp for a complete hybrid IDSP example.","title":"Identity Sync Profiles & Process"},{"location":"topics/idsp/#identity-sync-profiles-process","text":"Metacoda Identity Sync Profiles (IDSPs) are XML files, with a file extension of .idsp, that contain configuration information as required for the Metacoda Identity Sync Plug-in to synchronise target SAS\u00ae metadata identities (users and groups) with source identities, such as users and groups from Microsoft Active Directory. The Metacoda Identity Sync Plug-in can be used interactively, within the SAS Management Console, to manually preview any changes before applying them to SAS metadata. Alternatively, Identity Sync Profiles can also be processed by the Metacoda Plug-ins Batch Interface so that automatic identity synchronisations can be regularly scheduled. IDSPs are usually created by using the Metacoda Identity Sync Profile Wizard within SAS Management Console. This wizard only provides access to the most commonly used configurable elements. To access to some of the more advanced features you will need to edit the IDSP XML directly. Manual edits will be preserved if you subsequently use the wizard to load, modify, and save the IDSP file. If you manually edit the IDSP while it is still open in the Identity Sync Plug-in you will need to re-open it to pick up those manual changes. This documentation and the associated samples are provided to show how some of the these features are represented in the IDSP XML in case you need to use them.","title":"Identity Sync Profiles &amp; Process"},{"location":"topics/idsp/#identity-sync-process-overview","text":"At the heart of the Metacoda Identity Sync process are the well-known and time-proven SAS %MDU macros as documented in the User Import Macros appendix of the SAS 9.4 Intelligence Platform: Security Administration Guide . The Metacoda Identity Sync Plug-in wraps a further framework around these macros including: A SAS Management Console hosted point and click interface to create and use configurations (IDSPs), and interactively preview and apply identity changes to SAS metadata; A batch interface for the scheduled automatic application of identity changes to SAS metadata; A custom Java-based process that provides a variety of methods to target identities from a Microsoft Active Directory source, including handling of the following: Deeply nested groups Paginated queries to support extraction of large numbers of identities and groups with more than 1,500 member. Support for following group members into other domains in the same forest. Support for combining identities from multiple identity sources, such as domains in multiple AD forests, through Hybrid IDSPs. Support for sourcing identities from an Identity Sync Export (IDSX) file, an XML format that can be used for identity sync between different SAS environments, or from other identity providers. The generation of Audit Reports to document the use of the identity sync process over time; Code hooks for customisation of the identity sync process. The following sections on basic and hybrid IDSPs provide some more detail on this process.","title":"Identity Sync Process Overview"},{"location":"topics/idsp/#single-basic-identity-sync-profile","text":"Most implementation use a single basic IDSP that targets a single provider of identities such as a single Microsoft Active Directory (AD) domain. The diagram below illustrates this process (which is controlled by the contents of the IDSP): Step 0 Initialisation : A SAS Workspace Server is spawned, and 3 temporary libraries (IDS_SRC, IDS_TGT, IDS_CHG) are configured to house the canonical and change tables as required by the SAS %MDU macros. Empty canonical tables are created using the standard SAS %MDUIMPC macro. Step 1 Source Extract : A custom Java-based process connects to an AD server and extracts information for the targeted identities (users and groups) as specified in the IDSP. Step 2 Source Upload : The source identities extracted in step 1 are uploaded into tables in the IDS_SRC library. Step 3 Target Extract : The standard SAS %MDUEXTR macro is used to extract target identities from the SAS metadata server into canonical tables in the IDS_TGT library. Step 4 Compare : The standard SAS %MDUCMP macro is used to compare source identities from the IDS_SRC library with target identities from the IDS_TGT library. Any sync exceptions specified in the IDSP are also provided to the macro so that those identities can be ignored as required. Any changes that need to be applied to the target SAS identities to get them back into sync with the source AD identities will be generated as change tables the IDS_CHG library. If tag-deletion has been specified in the IDSP then Metacoda augments this process by converting any user/group deletions into updates to represent tag-deletes. Step 5 Validate : The standard SAS %MDUCHGV macro is used to valid any changes present in IDS_CHG libraries change tables. If any validation errors are detected the identity sync process is aborted. Step 6 Apply Changes : If there are changes to be applied, and no validation errors, then the standard SAS %MDUCHGLB macro is used to apply changes to SAS metadata using the change tables in the IDS_CHG library. A basic IDSP to implement synchronisation with a single Active Directory server has the following general structure: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <IdentitySyncProfile ...> <IdentitySource type=\"activeDirectoryServer\"/> <LDAPConfig ... /> <GroupSync ...> <IncludedGroups> <Group name=\"Group1\" ... /> <Group name=\"Group2\" ... /> ... </IncludedGroups> </GroupSync> <UserSync ... /> <Options ... /> <SyncExceptions> <SyncException ... /> ... </SyncExceptions> </IdentitySyncProfile> The <IdentitySource> tag indicates the source for identities, in this case AD. The <LDAPConfig> contains details of how to connect to AD: host name, port, protocol, credentials, whether to use encryption, base DNs and filters for search, attribute mappings etc. The <GroupSync> tag specifies the basis for identifying targeted groups, excluded groups, and general group related options. The <UserSync> tag specifies the basis for identifying targeted users, excluded users, and general user related options. The <Options> tag has some generic options for the sync process. The <SyncExceptions> tag is used to specify any identities to be ignored. See https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-basic.idsp for a complete example.","title":"Single (Basic) Identity Sync Profile"},{"location":"topics/idsp/#multiple-hybrid-identity-sync-profiles","text":"In more complex environments there might be a need to synchronise SAS identities from multiple independant sources. Hybrid Identity Sync Profiles, available since Metacoda Plug-ins 6.01 R1, can be used in situations where is not possible to obtain all required SAS identities using a single Identity Sync Profile. If you were to try to simply use multiple IDSPs in sequence, the identities that were added by the first IDSP would be deleted by the processing of the second IDSP. This is why we need a hybrid IDSP that collects all of the identities from multiple sources before it attempts to synchronise them with SAS metadata. A hybrid IDSP is structured as a parent, or wrapper, IDSP that references individual child, or included, IDSPs like so: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <IdentitySyncProfile ...> <IdentitySource type=\"hybrid\"/> <IncludeIdentitySyncProfile path=\"d1.idsp\"/> <IncludeIdentitySyncProfile path=\"d2.idsp\"/> ... <Options ... /> <SyncExceptions> <SyncException ... /> ... </SyncExceptions> </IdentitySyncProfile> In the IDSP above, the <IdentitySource> tag identifies it as a Hybrid IDSP, and the multiple <IncludeIdentitySyncProfile> tags identity the other child IDSPs to be used to source identities. You can have as many <IncludeIdentitySyncProfile> tags as necessary. The Identity Sync Profile Wizard cannot currently be used to create a Hybrid IDSP - it must be created using an XML or text editor using the above, or one of the samples in this repository, as a template. The individual included child IDSPs can be generated using the wizard, although you would not normally apply the changes from a child IDSP on its own except when testing it in a sandpit environment. The Identity Sync Process differs slightly with Hybrid IDSPs. The diagram below illustrates this, where a Hybrid IDSP includes 2 child IDSPs, d1 and d2 : Step 0 Initialisation : A SAS Workspace Server is spawned, the IDS_SRC, IDS_TGT, and IDS_CHG temporary libraries are configured, and empty canonical tables added using the standard SAS %MDUIMPC macro. Step 1 Source #1 Extract (d1) : Source identities are fetched from the first AD server as specified in the first child IDSP d1.idsp. Step 2 Source #1 Upload (d1) : The first batch of source identities from step 1 are uploaded and appended to the IDS_SRC tables. Step 3 Source #2 Extract (d2) : Source identities are fetched from the second AD server as specified in the second child IDSP d2.idsp. Step 4 Source #2 Upload (d2) : The second batch of source identities from step 3 are uploaded and appended to the IDS_SRC tables. Step 5 Target Extract : The standard SAS %MDUEXTR macro is used to extract target identities from the SAS metadata server into canonical tables in the IDS_TGT library. Step 6 Compare : The standard SAS %MDUCMP macro is used to compare the combined set of source identities from the IDS_SRC library with target identities from the IDS_TGT library to generate change tables the IDS_CHG library. Any sync exceptions specified in the Hybrid IDSP are also provided to the macro so that those identities can be ignored as required. Any sync exceptions specified in the child IDSPs are ignored. If tag-deletion has been specified in the Hybrid IDSP then Metacoda augments this process by converting any user/group deletions into updates to represent tag-deletes. Step 7 Validate : The standard SAS %MDUCHGV macro is used to valid any changes present in IDS_CHG libraries change tables. If any validation errors are detected the identity sync process is aborted. Step 8 Apply Changes : If there are changes to be applied, and no validation errors, then the standard SAS %MDUCHGLB macro is used to apply changes to SAS metadata using the change tables in the IDS_CHG library. Some other noteworthy differences in Hybrid IDSP processing when compared to single IDSP processing: Any <Options> or <SyncExceptions> tags, and any code hooks except <PreSourceExtractCode> and <PostSourceExtractCode> , that are specified in child IDSPs are ignored. <Options> and <SyncExceptions> tags are only considered when specified in the Hybrid IDSP. If <PreSourceExtractCode> and <PostSourceExtractCode> code hooks are specified in the Hybrid IDSP then they are processed before and after all child IDSPs source identity extractions. Any <LDAPConfig> , <IDSXFileConfig> , <GroupSync> , and <UserSync> tags specified in the Hybrid IDSP are ignored. All code hooks in the Hybrid IDSP are processed. See https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid.idsp , https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d1.idsp , and https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d2.idsp for a complete hybrid IDSP example.","title":"Multiple (Hybrid) Identity Sync Profiles"}]}