{
    "docs": [
        {
            "location": "/",
            "text": "Metacoda Identity Sync Utilities (idsync-utils)\n\n\nIntro\n\n\nThis site provides documentation for the \nMetacoda\u00ae Identity Sync Utilities (idsync-utils)\nrepository on github\n where you will find extra samples\nand SAS macros that can be used with the\n\nMetacoda Identity Sync Plug-in\n.\n\n\nMetacoda customers and partners, and potentially other SAS customers, may find these utilities\nuseful when setting up an identity synchronisation process between a \nSAS\u00ae\n\nMetadata Server and an external identity provider, such as Microsoft Active Directory.\n\n\nInstallation\n\n\nChoose a suitable location in the file system on your SAS server (or workstation) and clone the\nrepository from github e.g.\n\n\ngit clone git@github.com:Metacoda/idsync-utils.git\n\n\n\nor:\n\n\ngit clone https://github.com/Metacoda/idsync-utils.git\n\n\n\nAlternatively you can download a ZIP file from https://github.com/Metacoda/idsync-utils/archive/master.zip and unpack\nit into the desired location.\n\n\nIf you want to make the SAS macros available using the SAS autocall facility you can add the path\nto the idsync-utils/sasautos directory into the SASAUTOS option by adding the following line into\nthe appropriate \nsasv9_usermods.cfg\n file for your SAS platform installation\ne.g. /opt/sas94m4/config/Lev1/SASApp/sasv9_usermods.cfg\n\n\n-insert sasautos \"/path/to/idsync-utils/sasautos\"\n\n\n\nRepository Structure\n\n\n\n\n\n\n\n\nFolder\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\ndocs/\n\n\nThis documentation.\n\n\n\n\n\n\nsamples/\n\n\nContains example Metacoda Identity Sync Profiles (.idsp files) and SAS programs that relate to SAS metadata identity synchronisation.\n\n\n\n\n\n\nsasautos/\n\n\nContains utility SAS macros that may be of use in an identity sync process. This directory can be added to the SAS autocall macro search path if required.",
            "title": "Intro"
        },
        {
            "location": "/#metacoda-identity-sync-utilities-idsync-utils",
            "text": "",
            "title": "Metacoda Identity Sync Utilities (idsync-utils)"
        },
        {
            "location": "/#intro",
            "text": "This site provides documentation for the  Metacoda\u00ae Identity Sync Utilities (idsync-utils)\nrepository on github  where you will find extra samples\nand SAS macros that can be used with the Metacoda Identity Sync Plug-in .  Metacoda customers and partners, and potentially other SAS customers, may find these utilities\nuseful when setting up an identity synchronisation process between a  SAS\u00ae \nMetadata Server and an external identity provider, such as Microsoft Active Directory.",
            "title": "Intro"
        },
        {
            "location": "/#installation",
            "text": "Choose a suitable location in the file system on your SAS server (or workstation) and clone the\nrepository from github e.g.  git clone git@github.com:Metacoda/idsync-utils.git  or:  git clone https://github.com/Metacoda/idsync-utils.git  Alternatively you can download a ZIP file from https://github.com/Metacoda/idsync-utils/archive/master.zip and unpack\nit into the desired location.  If you want to make the SAS macros available using the SAS autocall facility you can add the path\nto the idsync-utils/sasautos directory into the SASAUTOS option by adding the following line into\nthe appropriate  sasv9_usermods.cfg  file for your SAS platform installation\ne.g. /opt/sas94m4/config/Lev1/SASApp/sasv9_usermods.cfg  -insert sasautos \"/path/to/idsync-utils/sasautos\"",
            "title": "Installation"
        },
        {
            "location": "/#repository-structure",
            "text": "Folder  Notes      docs/  This documentation.    samples/  Contains example Metacoda Identity Sync Profiles (.idsp files) and SAS programs that relate to SAS metadata identity synchronisation.    sasautos/  Contains utility SAS macros that may be of use in an identity sync process. This directory can be added to the SAS autocall macro search path if required.",
            "title": "Repository Structure"
        },
        {
            "location": "/topics/idsp/",
            "text": "Identity Sync Profiles & Process\n\n\nMetacoda Identity Sync Profiles (IDSPs) are XML files, with a file extension of .idsp, that contain\nconfiguration information as required for the\n\nMetacoda Identity Sync Plug-in\n\nto synchronise target SAS\u00ae metadata identities (users and groups) with source identities, such as\nusers and groups from Microsoft Active Directory.\nThe Metacoda Identity Sync Plug-in can be used interactively, within the SAS Management Console, to\nmanually preview any changes before applying them to SAS metadata. Alternatively, Identity Sync\nProfiles can also be processed by the Metacoda Plug-ins Batch Interface so that automatic identity\nsynchronisations can be regularly scheduled.  \n\n\nIDSPs are usually created by using the Metacoda Identity Sync Profile Wizard within SAS Management\nConsole. This wizard only provides access to the most commonly used configurable elements.\nTo access to some of the more advanced features you will need to edit the IDSP XML directly.\nManual edits will be preserved if you subsequently use the wizard to load, modify, and save the\nIDSP file. If you manually edit the IDSP while it is still open in the Identity Sync Plug-in you\nwill need to re-open it to pick up those manual changes.     \n\n\nThis documentation and the associated samples are provided to show how some of the these features\nare represented in the IDSP XML in case you need to use them.\n\n\nIdentity Sync Process Overview\n\n\nAt the heart of the Metacoda Identity Sync process are the well-known and time-proven SAS %MDU\nmacros as documented in the\n\nUser Import Macros\n\nappendix of the \nSAS 9.4 Intelligence Platform: Security Administration Guide\n. The Metacoda\nIdentity Sync Plug-in wraps a further framework around these macros including:\n\n\n\n\nA SAS Management Console hosted point and click interface to create and use configurations\n  (IDSPs), and interactively preview and apply identity changes to SAS metadata;\n\n\nA batch interface for the scheduled automatic application of identity changes to SAS metadata;\n\n\nA custom Java-based process that provides a variety of methods to target identities from\n  a Microsoft Active Directory source, including handling of the following:\n\n\nDeeply nested groups  \n\n\nPaginated queries to support extraction of large numbers of identities and groups with more\n  than 1,500 member.  \n\n\nSupport for following group members into other domains in the same forest. \n\n\n\n\n\n\nSupport for combining identities from multiple identity sources, such as domains in multiple AD\n  forests, through Hybrid IDSPs.  \n\n\nSupport for sourcing identities from an Identity Sync Export (IDSX) file, an XML format that\n  can be used for identity sync between different SAS environments, or from other identity\n  providers.\n\n\nThe generation of Audit Reports to document the use of the identity sync process over time;\n\n\nCode hooks for customisation of the identity sync process.  \n\n\n\n\nThe following sections on basic and hybrid IDSPs provide some more detail on this process. \n\n\nSingle (Basic) Identity Sync Profile\n\n\nMost implementation use a single basic IDSP that targets a single provider of identities such\nas a single Microsoft Active Directory (AD) domain. The diagram below illustrates this process\n(which is controlled by the contents of the IDSP): \n\n\n\n\n\n\nStep 0 Initialisation\n: A SAS Workspace Server is spawned, and 3 temporary libraries\n  (IDS_SRC, IDS_TGT,  IDS_CHG) are configured to house the\n  \ncanonical\n\n  and change tables as required by the SAS %MDU macros. Empty canonical tables are created using\n  the standard SAS\n  \n%MDUIMPC\n\n  macro. \n\n\nStep 1 Source Extract\n: A custom Java-based process connects to an AD server and extracts\n  information for the targeted identities (users and groups) as specified in the IDSP.\n\n\nStep 2 Source Upload\n: The source identities extracted in step 1 are uploaded into tables in\n  the IDS_SRC library.\n\n\nStep 3 Target Extract\n: The standard SAS\n  \n%MDUEXTR\n \n  macro is used to extract target identities from the SAS metadata server into canonical tables in\n  the IDS_TGT library.\n\n\nStep 4 Compare\n:  The standard SAS\n  \n%MDUCMP\n\n  macro is used to compare source identities from the IDS_SRC library with target identities from\n  the IDS_TGT library.\n  Any sync exceptions specified in the IDSP are also provided to the macro so that those identities\n  can be ignored as required.\n  Any changes that need to be applied to the target SAS identities to get them back into sync with\n  the source AD identities will be generated as change tables the IDS_CHG library.\n  If tag-deletion has been specified in the IDSP then Metacoda augments this process by converting\n  any user/group deletions into updates to represent tag-deletes.\n\n\nStep 5 Validate\n: The standard SAS\n  \n%MDUCHGV\n\n  macro is used to valid any changes present in\n  IDS_CHG libraries change tables. If any validation errors are detected the identity sync process\n  is aborted.\n\n\nStep 6 Apply Changes\n: If there are changes to be applied, and no validation errors, then\n  the standard SAS\n  \n%MDUCHGLB\n\n  macro is used to apply changes to SAS metadata using the change tables in the IDS_CHG library.\n\n\n\n\nA basic IDSP to implement synchronisation with a single Active Directory server has the following\ngeneral structure:   \n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<IdentitySyncProfile ...>\n  <IdentitySource type=\"activeDirectoryServer\"/>\n  <LDAPConfig ... />\n  <GroupSync ...> \n    <IncludedGroups>\n      <Group name=\"Group1\" ... />\n      <Group name=\"Group2\" ... />\n      ...\n    </IncludedGroups>\n  </GroupSync>\n  <UserSync ... />\n  <Options ... />\n  <SyncExceptions>\n    <SyncException ... />\n    ...\n  </SyncExceptions>\n</IdentitySyncProfile>\n\n\n\n\n\nThe \n<IdentitySource>\n tag indicates the source for identities, in this case AD.\n\n\nThe \n<LDAPConfig>\n contains details of how to connect to AD: host name, port, protocol,\n  credentials, whether to use encryption, base DNs and filters for search, attribute mappings etc.\n\n\nThe \n<GroupSync>\n tag specifies the basis for identifying targeted groups, excluded groups, and\n  general group related options.    \n\n\nThe \n<UserSync>\n tag specifies the basis for identifying targeted users, excluded users, and\n  general user related options.\n\n\nThe \n<Options>\n tag has some generic options for the sync process.\n\n\nThe \n<SyncExceptions>\n tag is used to specify any identities to be ignored.    \n\n\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-basic.idsp\n for a\ncomplete example. \n\n\nMultiple (Hybrid) Identity Sync Profiles\n\n\nIn more complex environments there might be a need to synchronise SAS identities from multiple\nindependant sources. Hybrid Identity Sync Profiles, available since Metacoda Plug-ins 6.01 R1, can\nbe used in situations where is not possible to obtain all required SAS identities using a single\nIdentity Sync Profile.\n\n\nIf you were to try to simply use multiple IDSPs in sequence, the identities that were added by the\nfirst IDSP would be deleted by the processing of the second IDSP. This is why we need a hybrid IDSP\nthat collects all of the identities from multiple sources before it attempts to synchronise them\nwith SAS metadata.   \n\n\nA hybrid IDSP is structured as a parent, or wrapper, IDSP that references individual child, or\nincluded, IDSPs like so:      \n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<IdentitySyncProfile ...>\n  <IdentitySource type=\"hybrid\"/>\n  <IncludeIdentitySyncProfile path=\"d1.idsp\"/>\n  <IncludeIdentitySyncProfile path=\"d2.idsp\"/>\n  ...\n  <Options ... />\n  <SyncExceptions>\n    <SyncException ... />\n    ...\n  </SyncExceptions>\n</IdentitySyncProfile>\n\n\n\nIn the IDSP above, the \n<IdentitySource>\n tag identifies it as a Hybrid IDSP, and the multiple\n\n<IncludeIdentitySyncProfile>\n tags identity the other child IDSPs to be used to source identities.\nYou can have as many \n<IncludeIdentitySyncProfile>\n tags as necessary.\n\n\nThe Identity Sync Profile Wizard cannot currently be used to create a Hybrid IDSP - it must be\ncreated using an XML or text editor using the above, or one of the samples in this repository,\nas a template. The individual included child IDSPs can be generated using the wizard, although\nyou would not normally apply the changes from a child IDSP on its own except when testing it in a\nsandpit environment.\n\n\nThe Identity Sync Process differs slightly with Hybrid IDSPs. The diagram below illustrates this,\nwhere a Hybrid IDSP includes 2 child IDSPs, \nd1\n and \nd2\n:\n\n\n\n\n\n\nStep 0 Initialisation\n: A SAS Workspace Server is spawned, the IDS_SRC, IDS_TGT, and IDS_CHG\n  temporary libraries are configured, and empty canonical tables added using the standard SAS\n  %MDUIMPC macro. \n\n\nStep 1 Source #1 Extract (d1)\n: Source identities are fetched from the first AD server as\n  specified in the first child IDSP d1.idsp.\n\n\nStep 2 Source #1 Upload (d1)\n: The first batch of source identities from step 1 are uploaded\n  and appended to the IDS_SRC tables.\n\n\nStep 3 Source #2 Extract (d2)\n: Source identities are fetched from the second AD server as\n  specified in the second child IDSP d2.idsp.\n\n\nStep 4 Source #2 Upload (d2)\n: The second batch of source identities from step 3 are\n  uploaded and appended to the IDS_SRC tables.\n\n\nStep 5 Target Extract\n: The standard SAS %MDUEXTR macro is used to extract target identities\n  from the SAS metadata server into canonical tables in the IDS_TGT library.\n\n\nStep 6 Compare\n:  The standard SAS %MDUCMP macro is used to compare the combined set of\n  source identities from the IDS_SRC library with target identities from the IDS_TGT library to\n  generate change tables the IDS_CHG library.\n  Any sync exceptions specified in the \nHybrid IDSP\n are also provided to the macro so that\n  those identities can be ignored as required. Any sync exceptions specified in the child IDSPs are\n  ignored. \n  If tag-deletion has been specified in the \nHybrid IDSP\n then Metacoda augments this process\n  by converting any user/group deletions into updates to represent tag-deletes.\n\n\nStep 7 Validate\n: The standard SAS %MDUCHGV macro is used to valid any changes present in\n  IDS_CHG libraries change tables. If any validation errors are detected the identity sync process\n  is aborted.\n\n\nStep 8 Apply Changes\n: If there are changes to be applied, and no validation errors, then\n  the standard SAS %MDUCHGLB macro is used to apply changes to SAS metadata using the change tables\n  in the IDS_CHG library.\n\n\n\n\nSome other noteworthy differences in Hybrid IDSP processing when compared to single IDSP processing:\n\n\n\n\nAny \n<Options>\n or \n<SyncExceptions>\n tags, and any code hooks except \n<PreSourceExtractCode>\n\n  and \n<PostSourceExtractCode>\n, that are specified in child IDSPs are ignored.\n\n\n<Options>\n and \n<SyncExceptions>\n tags are only considered when specified in the Hybrid IDSP.\n\n\nIf \n<PreSourceExtractCode>\n and \n<PostSourceExtractCode>\n code hooks are specified in the Hybrid\n  IDSP then they are processed before and after all child IDSPs source identity extractions.\n\n\nAny \n<LDAPConfig>\n, \n<IDSXFileConfig>\n, \n<GroupSync>\n, and \n<UserSync>\n tags specified in the\n  Hybrid IDSP are ignored.\n\n\nAll code hooks in the Hybrid IDSP are processed.\n\n\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid.idsp\n,\n\nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d1.idsp\n, and\n\nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d2.idsp\n\nfor a complete hybrid IDSP example.",
            "title": "Identity Sync Profiles & Process"
        },
        {
            "location": "/topics/idsp/#identity-sync-profiles-process",
            "text": "Metacoda Identity Sync Profiles (IDSPs) are XML files, with a file extension of .idsp, that contain\nconfiguration information as required for the Metacoda Identity Sync Plug-in \nto synchronise target SAS\u00ae metadata identities (users and groups) with source identities, such as\nusers and groups from Microsoft Active Directory.\nThe Metacoda Identity Sync Plug-in can be used interactively, within the SAS Management Console, to\nmanually preview any changes before applying them to SAS metadata. Alternatively, Identity Sync\nProfiles can also be processed by the Metacoda Plug-ins Batch Interface so that automatic identity\nsynchronisations can be regularly scheduled.    IDSPs are usually created by using the Metacoda Identity Sync Profile Wizard within SAS Management\nConsole. This wizard only provides access to the most commonly used configurable elements.\nTo access to some of the more advanced features you will need to edit the IDSP XML directly.\nManual edits will be preserved if you subsequently use the wizard to load, modify, and save the\nIDSP file. If you manually edit the IDSP while it is still open in the Identity Sync Plug-in you\nwill need to re-open it to pick up those manual changes.       This documentation and the associated samples are provided to show how some of the these features\nare represented in the IDSP XML in case you need to use them.",
            "title": "Identity Sync Profiles &amp; Process"
        },
        {
            "location": "/topics/idsp/#identity-sync-process-overview",
            "text": "At the heart of the Metacoda Identity Sync process are the well-known and time-proven SAS %MDU\nmacros as documented in the User Import Macros \nappendix of the  SAS 9.4 Intelligence Platform: Security Administration Guide . The Metacoda\nIdentity Sync Plug-in wraps a further framework around these macros including:   A SAS Management Console hosted point and click interface to create and use configurations\n  (IDSPs), and interactively preview and apply identity changes to SAS metadata;  A batch interface for the scheduled automatic application of identity changes to SAS metadata;  A custom Java-based process that provides a variety of methods to target identities from\n  a Microsoft Active Directory source, including handling of the following:  Deeply nested groups    Paginated queries to support extraction of large numbers of identities and groups with more\n  than 1,500 member.    Support for following group members into other domains in the same forest.     Support for combining identities from multiple identity sources, such as domains in multiple AD\n  forests, through Hybrid IDSPs.    Support for sourcing identities from an Identity Sync Export (IDSX) file, an XML format that\n  can be used for identity sync between different SAS environments, or from other identity\n  providers.  The generation of Audit Reports to document the use of the identity sync process over time;  Code hooks for customisation of the identity sync process.     The following sections on basic and hybrid IDSPs provide some more detail on this process.",
            "title": "Identity Sync Process Overview"
        },
        {
            "location": "/topics/idsp/#single-basic-identity-sync-profile",
            "text": "Most implementation use a single basic IDSP that targets a single provider of identities such\nas a single Microsoft Active Directory (AD) domain. The diagram below illustrates this process\n(which is controlled by the contents of the IDSP):     Step 0 Initialisation : A SAS Workspace Server is spawned, and 3 temporary libraries\n  (IDS_SRC, IDS_TGT,  IDS_CHG) are configured to house the\n   canonical \n  and change tables as required by the SAS %MDU macros. Empty canonical tables are created using\n  the standard SAS\n   %MDUIMPC \n  macro.   Step 1 Source Extract : A custom Java-based process connects to an AD server and extracts\n  information for the targeted identities (users and groups) as specified in the IDSP.  Step 2 Source Upload : The source identities extracted in step 1 are uploaded into tables in\n  the IDS_SRC library.  Step 3 Target Extract : The standard SAS\n   %MDUEXTR  \n  macro is used to extract target identities from the SAS metadata server into canonical tables in\n  the IDS_TGT library.  Step 4 Compare :  The standard SAS\n   %MDUCMP \n  macro is used to compare source identities from the IDS_SRC library with target identities from\n  the IDS_TGT library.\n  Any sync exceptions specified in the IDSP are also provided to the macro so that those identities\n  can be ignored as required.\n  Any changes that need to be applied to the target SAS identities to get them back into sync with\n  the source AD identities will be generated as change tables the IDS_CHG library.\n  If tag-deletion has been specified in the IDSP then Metacoda augments this process by converting\n  any user/group deletions into updates to represent tag-deletes.  Step 5 Validate : The standard SAS\n   %MDUCHGV \n  macro is used to valid any changes present in\n  IDS_CHG libraries change tables. If any validation errors are detected the identity sync process\n  is aborted.  Step 6 Apply Changes : If there are changes to be applied, and no validation errors, then\n  the standard SAS\n   %MDUCHGLB \n  macro is used to apply changes to SAS metadata using the change tables in the IDS_CHG library.   A basic IDSP to implement synchronisation with a single Active Directory server has the following\ngeneral structure:     <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<IdentitySyncProfile ...>\n  <IdentitySource type=\"activeDirectoryServer\"/>\n  <LDAPConfig ... />\n  <GroupSync ...> \n    <IncludedGroups>\n      <Group name=\"Group1\" ... />\n      <Group name=\"Group2\" ... />\n      ...\n    </IncludedGroups>\n  </GroupSync>\n  <UserSync ... />\n  <Options ... />\n  <SyncExceptions>\n    <SyncException ... />\n    ...\n  </SyncExceptions>\n</IdentitySyncProfile>   The  <IdentitySource>  tag indicates the source for identities, in this case AD.  The  <LDAPConfig>  contains details of how to connect to AD: host name, port, protocol,\n  credentials, whether to use encryption, base DNs and filters for search, attribute mappings etc.  The  <GroupSync>  tag specifies the basis for identifying targeted groups, excluded groups, and\n  general group related options.      The  <UserSync>  tag specifies the basis for identifying targeted users, excluded users, and\n  general user related options.  The  <Options>  tag has some generic options for the sync process.  The  <SyncExceptions>  tag is used to specify any identities to be ignored.       See  https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-basic.idsp  for a\ncomplete example.",
            "title": "Single (Basic) Identity Sync Profile"
        },
        {
            "location": "/topics/idsp/#multiple-hybrid-identity-sync-profiles",
            "text": "In more complex environments there might be a need to synchronise SAS identities from multiple\nindependant sources. Hybrid Identity Sync Profiles, available since Metacoda Plug-ins 6.01 R1, can\nbe used in situations where is not possible to obtain all required SAS identities using a single\nIdentity Sync Profile.  If you were to try to simply use multiple IDSPs in sequence, the identities that were added by the\nfirst IDSP would be deleted by the processing of the second IDSP. This is why we need a hybrid IDSP\nthat collects all of the identities from multiple sources before it attempts to synchronise them\nwith SAS metadata.     A hybrid IDSP is structured as a parent, or wrapper, IDSP that references individual child, or\nincluded, IDSPs like so:        <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<IdentitySyncProfile ...>\n  <IdentitySource type=\"hybrid\"/>\n  <IncludeIdentitySyncProfile path=\"d1.idsp\"/>\n  <IncludeIdentitySyncProfile path=\"d2.idsp\"/>\n  ...\n  <Options ... />\n  <SyncExceptions>\n    <SyncException ... />\n    ...\n  </SyncExceptions>\n</IdentitySyncProfile>  In the IDSP above, the  <IdentitySource>  tag identifies it as a Hybrid IDSP, and the multiple <IncludeIdentitySyncProfile>  tags identity the other child IDSPs to be used to source identities.\nYou can have as many  <IncludeIdentitySyncProfile>  tags as necessary.  The Identity Sync Profile Wizard cannot currently be used to create a Hybrid IDSP - it must be\ncreated using an XML or text editor using the above, or one of the samples in this repository,\nas a template. The individual included child IDSPs can be generated using the wizard, although\nyou would not normally apply the changes from a child IDSP on its own except when testing it in a\nsandpit environment.  The Identity Sync Process differs slightly with Hybrid IDSPs. The diagram below illustrates this,\nwhere a Hybrid IDSP includes 2 child IDSPs,  d1  and  d2 :    Step 0 Initialisation : A SAS Workspace Server is spawned, the IDS_SRC, IDS_TGT, and IDS_CHG\n  temporary libraries are configured, and empty canonical tables added using the standard SAS\n  %MDUIMPC macro.   Step 1 Source #1 Extract (d1) : Source identities are fetched from the first AD server as\n  specified in the first child IDSP d1.idsp.  Step 2 Source #1 Upload (d1) : The first batch of source identities from step 1 are uploaded\n  and appended to the IDS_SRC tables.  Step 3 Source #2 Extract (d2) : Source identities are fetched from the second AD server as\n  specified in the second child IDSP d2.idsp.  Step 4 Source #2 Upload (d2) : The second batch of source identities from step 3 are\n  uploaded and appended to the IDS_SRC tables.  Step 5 Target Extract : The standard SAS %MDUEXTR macro is used to extract target identities\n  from the SAS metadata server into canonical tables in the IDS_TGT library.  Step 6 Compare :  The standard SAS %MDUCMP macro is used to compare the combined set of\n  source identities from the IDS_SRC library with target identities from the IDS_TGT library to\n  generate change tables the IDS_CHG library.\n  Any sync exceptions specified in the  Hybrid IDSP  are also provided to the macro so that\n  those identities can be ignored as required. Any sync exceptions specified in the child IDSPs are\n  ignored. \n  If tag-deletion has been specified in the  Hybrid IDSP  then Metacoda augments this process\n  by converting any user/group deletions into updates to represent tag-deletes.  Step 7 Validate : The standard SAS %MDUCHGV macro is used to valid any changes present in\n  IDS_CHG libraries change tables. If any validation errors are detected the identity sync process\n  is aborted.  Step 8 Apply Changes : If there are changes to be applied, and no validation errors, then\n  the standard SAS %MDUCHGLB macro is used to apply changes to SAS metadata using the change tables\n  in the IDS_CHG library.   Some other noteworthy differences in Hybrid IDSP processing when compared to single IDSP processing:   Any  <Options>  or  <SyncExceptions>  tags, and any code hooks except  <PreSourceExtractCode> \n  and  <PostSourceExtractCode> , that are specified in child IDSPs are ignored.  <Options>  and  <SyncExceptions>  tags are only considered when specified in the Hybrid IDSP.  If  <PreSourceExtractCode>  and  <PostSourceExtractCode>  code hooks are specified in the Hybrid\n  IDSP then they are processed before and after all child IDSPs source identity extractions.  Any  <LDAPConfig> ,  <IDSXFileConfig> ,  <GroupSync> , and  <UserSync>  tags specified in the\n  Hybrid IDSP are ignored.  All code hooks in the Hybrid IDSP are processed.   See  https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid.idsp , https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d1.idsp , and https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d2.idsp \nfor a complete hybrid IDSP example.",
            "title": "Multiple (Hybrid) Identity Sync Profiles"
        },
        {
            "location": "/topics/ad-domains/",
            "text": "Active Directory Domains\n\n\nThis section describes some of the common scenarios when synchronising SAS metadata with Microsoft\nActive Directory (AD) domains and how Metacoda Identity Sync Profiles (IDSPs) can support these.\n\n\nSingle Domain / Single IDSP\n\n\nThe most common scenario is synchronising with a single domain. This can be supported with a single\nIDSP as described in the \nSingle (Basic) Identity Sync Profile\n section of\n\nIdentity Sync Profiles & Process\n and illustrated below:\n\n\n\n\nMultiple Domains / Single Forest / Single IDSP\n\n\nSometimes it is necessary to synchronise with multiple AD domains. If these domains are all within\nthe same AD forest then this can also be supported with a single IDSP. When following the well\nknown \nAGDLP or AGUDLP\n models for organising groups that span\ndomains, the IDSP can target groups in one of the domains and the Metacoda Identity Sync process\nwill follow group members into other domains in the same forest as shown in the diagram below.\n\n\n\n\nThe IDSP targets the AU domain in the AU forest. The Finance Domain Local group is one of the\nincluded groups. When processing group members, the Finance Universal group includes a Finance\nGlobal group from the EU domain (in the same forest) so all of its members are also considered\nfor synchronisation.  \n\n\nThe Identity Sync Process for this scenario is very similar to the single domain scenario except\nthat the source identity extraction process can return members from multiple domains in the same\nforest. The following diagram illustrates this variation.   \n\n\n\n\nIn scenarios like this, where multiple domains are involved, you will most likely want to choose\npseudo-attributes, such as \nsAMAccountNameWithDomain\n, that automatically include the name of the\nsource domain (as dynamically determined from the directory) when choosing attributes mappings\nin the Identity Sync Profile Wizard.\n\n\nMultiple Domains / Multiple Forests / Hybrid IDSP\n\n\nWhen SAS metadata identities need to be sourced from multiple AD domains, across multiple AD\nforests, it is necessary to use a Hybrid IDSP with at least one child IDSP per forest.\nFor more information on Hybrid IDSPs see the \nMultiple (Hybrid) Identity Sync Profiles\n section of\n\nIdentity Sync Profiles & Process\n.\n\n\nThe diagram below illustrates the Identity Sync Process for this scenario, where there are two\nAD domains, D1 and D2, which are in different AD forests. There are two child IDSPs, one for each\ndomain, wrapped up in a Hybrid IDSP. \n\n\n\n\nForeign Security Principals\n\n\nOccasionally when dealing with multiple domains you may encounter the following error message\nduring the Identity Sync Process:\n\n\nFailed to fetch included AD groups: Can't follow Foreign-Security-Principal into trusted domain\nfor AD identity (with DN 'CN=S-1-5-21-1234567890-123456789-123456789-1234,CN=ForeignSecurityPrincipals,DC=d1,DC=example,DC=com').\n\n\nThis is an error generated to highlight the fact that at least one of the targeted groups in the D1\ndomain contains a member from a domain in a different forest. This indicates a situation where\nthere are multiple AD forests with trust relationships. Whilst the single IDSP scenarios support\nfollowing groups into domains within the same forest, they do not support following groups into\ndomains in other forests. To synchronise with multiple domains across one or more forests it is\nnecessary to use Hybrid IDSPs and, if required, modify any affected child IDSPs to ensure they\nignore Foreign Security Principals.\n\n\nTo ignore Foreign Security Principals, the IDSP will need to be modified using a text editor, and\nthe \nforeignSecurityPrincipalHandling\n attribute added to the \nLDAPConfig\n tag with a value of\n\nignore\n like so:\n\n\n    <LDAPConfig\n    ...\n    foreignSecurityPrincipalHandling=\"ignore\"\n    />\n\n\n\nThis will ignore any group members that come from another forest (instead of generating an error).\nIf those members are actually required in SAS metadata then you will need to ensure that they are\nwithin a targeted group in the hybrid child IDSP that corresponds to that foreign domain.",
            "title": "Active Directory Domains"
        },
        {
            "location": "/topics/ad-domains/#active-directory-domains",
            "text": "This section describes some of the common scenarios when synchronising SAS metadata with Microsoft\nActive Directory (AD) domains and how Metacoda Identity Sync Profiles (IDSPs) can support these.",
            "title": "Active Directory Domains"
        },
        {
            "location": "/topics/ad-domains/#single-domain-single-idsp",
            "text": "The most common scenario is synchronising with a single domain. This can be supported with a single\nIDSP as described in the  Single (Basic) Identity Sync Profile  section of Identity Sync Profiles & Process  and illustrated below:",
            "title": "Single Domain / Single IDSP"
        },
        {
            "location": "/topics/ad-domains/#multiple-domains-single-forest-single-idsp",
            "text": "Sometimes it is necessary to synchronise with multiple AD domains. If these domains are all within\nthe same AD forest then this can also be supported with a single IDSP. When following the well\nknown  AGDLP or AGUDLP  models for organising groups that span\ndomains, the IDSP can target groups in one of the domains and the Metacoda Identity Sync process\nwill follow group members into other domains in the same forest as shown in the diagram below.   The IDSP targets the AU domain in the AU forest. The Finance Domain Local group is one of the\nincluded groups. When processing group members, the Finance Universal group includes a Finance\nGlobal group from the EU domain (in the same forest) so all of its members are also considered\nfor synchronisation.    The Identity Sync Process for this scenario is very similar to the single domain scenario except\nthat the source identity extraction process can return members from multiple domains in the same\nforest. The following diagram illustrates this variation.      In scenarios like this, where multiple domains are involved, you will most likely want to choose\npseudo-attributes, such as  sAMAccountNameWithDomain , that automatically include the name of the\nsource domain (as dynamically determined from the directory) when choosing attributes mappings\nin the Identity Sync Profile Wizard.",
            "title": "Multiple Domains / Single Forest / Single IDSP"
        },
        {
            "location": "/topics/ad-domains/#multiple-domains-multiple-forests-hybrid-idsp",
            "text": "When SAS metadata identities need to be sourced from multiple AD domains, across multiple AD\nforests, it is necessary to use a Hybrid IDSP with at least one child IDSP per forest.\nFor more information on Hybrid IDSPs see the  Multiple (Hybrid) Identity Sync Profiles  section of Identity Sync Profiles & Process .  The diagram below illustrates the Identity Sync Process for this scenario, where there are two\nAD domains, D1 and D2, which are in different AD forests. There are two child IDSPs, one for each\ndomain, wrapped up in a Hybrid IDSP.",
            "title": "Multiple Domains / Multiple Forests / Hybrid IDSP"
        },
        {
            "location": "/topics/ad-domains/#foreign-security-principals",
            "text": "Occasionally when dealing with multiple domains you may encounter the following error message\nduring the Identity Sync Process:  Failed to fetch included AD groups: Can't follow Foreign-Security-Principal into trusted domain\nfor AD identity (with DN 'CN=S-1-5-21-1234567890-123456789-123456789-1234,CN=ForeignSecurityPrincipals,DC=d1,DC=example,DC=com').  This is an error generated to highlight the fact that at least one of the targeted groups in the D1\ndomain contains a member from a domain in a different forest. This indicates a situation where\nthere are multiple AD forests with trust relationships. Whilst the single IDSP scenarios support\nfollowing groups into domains within the same forest, they do not support following groups into\ndomains in other forests. To synchronise with multiple domains across one or more forests it is\nnecessary to use Hybrid IDSPs and, if required, modify any affected child IDSPs to ensure they\nignore Foreign Security Principals.  To ignore Foreign Security Principals, the IDSP will need to be modified using a text editor, and\nthe  foreignSecurityPrincipalHandling  attribute added to the  LDAPConfig  tag with a value of ignore  like so:      <LDAPConfig\n    ...\n    foreignSecurityPrincipalHandling=\"ignore\"\n    />  This will ignore any group members that come from another forest (instead of generating an error).\nIf those members are actually required in SAS metadata then you will need to ensure that they are\nwithin a targeted group in the hybrid child IDSP that corresponds to that foreign domain.",
            "title": "Foreign Security Principals"
        },
        {
            "location": "/topics/canonical-tables/",
            "text": "Using Canonical Tables\n\n\nAs explained in \nIdentity Sync Profiles & Process\n, and shown in the diagram below,\nthe Metacoda Identity Sync Process normally uses three temporary SAS libraries for intermediate\n\ncanonical\n\nand change tables as required by the SAS %MDU macros.\n\n\n\n\nThese libraries are named IDS_SRC, IDS_TGT, and IDS_CHG, for source, target and change tables\nrespectively. Unless otherwise specified in the Identity Sync Profile (IDSP), these libraries will\nbe created as subdirectories of the temporary SAS WORK library/folder for the spawned SAS Workspace\nServer instance and automatically deleted then the workspace server instance is stopped when the\nprocess completes.        \n\n\nSwitching to Permanent Libraries\n\n\nWhilst the temporary nature of the IDS_SRC, IDS_TGT, and IDS_CHG libraries is appropriate for\nmost scenarios, sometimes you might want to retain these tables after the identity sync process\nhas completed. This might be for troubleshooting purposes or to re-use the tables for you own\ncustom requirements.\n\n\nTo make these libraries permanent, you need to select or create a directory in the file system of\nthe SAS Workspace Server that will used for identity synchronisation, and ensure appropriate file\nsystem access controls to allow the workspace server operating system launch identity to create\nsub-directories and read/write SAS tables in those directories.\n\n\nOnce you have a location, it can be specified by editing the IDSP in a text editor and adding a\nserverBaseDir attribute to the \n<Options>\n tag like so:     \n\n\n<IdentitySyncProfile ...>\n    ...\n    <Options\n        ...\n        serverBaseDir=\u201cData/idsync\u201d\n    />\n...\n</IdentitySyncProfile>\n\n\n\nThe serverBaseDir value is a file system path that can be either relative or absolute. If a\nrelative path is specified then it is relative to the SAS Application Server directory.\nFor example, given the \nData/idsync\n value specified above, if the SAS Application Server directory\nis \n/opt/sas/config/Lev1/SASApp\n then the following locations will be used for the three libraries:\n\n\n\n\nIDS_SRC: /opt/sas/config/Lev1/SASApp/Data/idsync/ids_src \n\n\nIDS_TGT: /opt/sas/config/Lev1/SASApp/Data/idsync/ids_tgt \n\n\nIDS_CHG: /opt/sas/config/Lev1/SASApp/Data/idsync/ids_chg \n\n\n\n\nThe ids_src, ids_tgt, and ids_chg sub-directories will be automatically created if they do not\nalready exist. \n\n\nLibraries and Tables\n\n\nIDS_SRC: Source Tables\n\n\nThe IDS_SRC library contains tables that represent source/master identities for synchronisation.\nThese usually contain users and groups extracted from Microsoft Active Directory.\nWhen using a Hybrid IDSP, the tables will contain combined identity information from all sources.    \n\n\n\n\n\n\n\n\nTable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nIDS_SRC.AUTHDOMAIN\n\n\nStandard SAS canonical table: authentication domains.\n\n\n\n\n\n\nIDS_SRC.EMAIL\n\n\nStandard SAS canonical table: email addresses for users.\n\n\n\n\n\n\nIDS_SRC.GRPMEMS\n\n\nStandard SAS canonical table: group/role members.\n\n\n\n\n\n\nIDS_SRC.IDGRPS\n\n\nStandard SAS canonical table: groups/roles.\n\n\n\n\n\n\nIDS_SRC.IDGRPS_X\n\n\nMetacoda table: groups/roles with extra attributes (1).\n\n\n\n\n\n\nIDS_SRC.IDS_EXCEPTION\n\n\nMetacoda table: sync exceptions (2).\n\n\n\n\n\n\nIDS_SRC.LOCATION\n\n\nStandard SAS canonical table: physical addresses for users.\n\n\n\n\n\n\nIDS_SRC.LOGINS\n\n\nStandard SAS canonical table: logins/accounts for users & groups.\n\n\n\n\n\n\nIDS_SRC.PERSON\n\n\nStandard SAS canonical table: users.\n\n\n\n\n\n\nIDS_SRC.PERSON_X\n\n\nMetacoda table: users with extra attributes (1).\n\n\n\n\n\n\nIDS_SRC.PHONE\n\n\nStandard SAS canonical table: phone numbers for users.\n\n\n\n\n\n\n\n\n(1) The IDS_SRC.IDGRPS_X and IDS_SRC.PERSON_X tables are only populated if the IDSP LDAPConfig\ntag has the groupOtherAttrs and userOtherAttrs attributes specified respectively.\nThese tables are copies of the corresponding IDS_SRC.IDGRPS and IDS_SRC.PERSON tables with\nadditional X_ prefixed columns for each of the additional LDAP attributes specified. These extra\nattributes are not used in the normal Metacoda Identity Sync Process but may be of use in any\ncustom processing requirements implemented in code hooks or elsewhere. \n\n\n(2) The IDS_SRC.IDS_EXCEPTION table is populated by the Metacoda Identity Sync Process from the sync\nexceptions specified in the IDSP (with \n<SyncException>\n tags). This table is provided to the\nstandard SAS %MDUCMP macro during the identity comparison step, via the \nEXCEPTIONS\n parameter.\n\n\nIDS_TGT: Target Tables\n\n\nThe IDS_TGT library contains tables that represent target identities for synchronisation: \nusers and groups currently in SAS metadata.\nThe contents of this library is generated by the use of the standard SAS %MDUEXTR macro.\n\n\n\n\n\n\n\n\nTable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nIDS_TGT.AUTHDOMAIN\n\n\nStandard SAS canonical table: authentication domains.\n\n\n\n\n\n\nIDS_TGT.EMAIL\n\n\nStandard SAS canonical table: email addresses for users.\n\n\n\n\n\n\nIDS_TGT.EMAIL_INFO\n\n\nStandard SAS canonical table: email addresses for users (additional info).\n\n\n\n\n\n\nIDS_TGT.GROUP_INFO\n\n\nStandard SAS canonical table: groups (additional info).\n\n\n\n\n\n\nIDS_TGT.GROUPLOGINS_INFO\n\n\nStandard SAS canonical table: logins/accounts for groups (additional info).\n\n\n\n\n\n\nIDS_TGT.GROUPMEMGROUPS_INFO\n\n\nStandard SAS canonical table: group/role group members (additional info).\n\n\n\n\n\n\nIDS_TGT.GROUPMEMPERSONS_INFO\n\n\nStandard SAS canonical table: group/role user members (additional info).\n\n\n\n\n\n\nIDS_TGT.GRPMEMS\n\n\nStandard SAS canonical table: group/role members.\n\n\n\n\n\n\nIDS_TGT.IDGRPS\n\n\nStandard SAS canonical table: groups/role.\n\n\n\n\n\n\nIDS_TGT.LOCATION\n\n\nStandard SAS canonical table: physical addresses for users.\n\n\n\n\n\n\nIDS_TGT.LOCATION_INFO\n\n\nStandard SAS canonical table: physical addresses for users (additional info).\n\n\n\n\n\n\nIDS_TGT.LOGINS\n\n\nStandard SAS canonical table: logins/accounts for users & groups.\n\n\n\n\n\n\nIDS_TGT.LOGINS_INFO\n\n\nStandard SAS canonical table: logins/accounts for users (additional info).\n\n\n\n\n\n\nIDS_TGT.PERSON\n\n\nStandard SAS canonical table: users.\n\n\n\n\n\n\nIDS_TGT.PERSON_INFO\n\n\nStandard SAS canonical table: users (additional info).\n\n\n\n\n\n\nIDS_TGT.PHONE\n\n\nStandard SAS canonical table: phone numbers for users.\n\n\n\n\n\n\nIDS_TGT.PHONE_INFO\n\n\nStandard SAS canonical table: phone numbers for users (additional info).\n\n\n\n\n\n\n\n\nIDS_CHG: Change Tables\n\n\nThe IDS_CHG library contains tables that represent changes required to target (SAS metadata)\nidentities to bring them back in sync with the sources identities. \nThe contents of this library is generated by the use of the standard SAS %MDUCMP macro and may be\nfurther customized by post-processing if the tag-delete feature has been enabled in the IDSP. \n\n\n\n\n\n\n\n\nTable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nIDS_CHG.AUTHDOMAIN_ADD\n\n\nStandard SAS change table: authentication domains to be added.\n\n\n\n\n\n\nIDS_CHG.AUTHDOMAIN_DELETE\n\n\nStandard SAS change table: authentication domains to be deleted.\n\n\n\n\n\n\nIDS_CHG.AUTHDOMAIN_SUMMARY\n\n\nStandard SAS change table: summary of authentication domains.\n\n\n\n\n\n\nIDS_CHG.AUTHDOMAIN_UPDATE\n\n\nStandard SAS change table: authentication domains to be updated.\n\n\n\n\n\n\nIDS_CHG.EMAIL_ADD\n\n\nStandard SAS change table: user email addresses to be added.\n\n\n\n\n\n\nIDS_CHG.EMAIL_DELETE\n\n\nStandard SAS change table: user email addresses to be deleted.\n\n\n\n\n\n\nIDS_CHG.EMAIL_UPDATE\n\n\nStandard SAS change table: user email addresses to be updated.\n\n\n\n\n\n\nIDS_CHG.GRPMEMS_ADD\n\n\nStandard SAS change table: members to be added to groups/roles.\n\n\n\n\n\n\nIDS_CHG.GRPMEMS_DELETE\n\n\nStandard SAS change table: members to be removed from groups/roles\n\n\n\n\n\n\nIDS_CHG.IDGRPS_ADD\n\n\nStandard SAS change table: groups to be added.\n\n\n\n\n\n\nIDS_CHG.IDGRPS_DELETE\n\n\nStandard SAS change table: groups to be deleted.\n\n\n\n\n\n\nIDS_CHG.IDGRPS_SUMMARY\n\n\nStandard SAS change table: summary of groups.\n\n\n\n\n\n\nIDS_CHG.IDGRPS_UPDATE\n\n\nStandard SAS change table: groups to be updated.\n\n\n\n\n\n\nIDS_CHG.IDS_ERROR\n\n\nA table populated if changes are not valid. See the SAS %MDUCHGV macro \nERRORSDS\n parameter.\n\n\n\n\n\n\nIDS_CHG.IDS_FAILED_OBJS\n\n\nA table populated if changes failed to be applied to SAS metadata. See the SAS %MDUCHGLB macro \nFAILEDOBJS\n parameter.\n\n\n\n\n\n\nIDS_CHG.LOCATION_ADD\n\n\nStandard SAS change table: user physical addresses to be added.\n\n\n\n\n\n\nIDS_CHG.LOCATION_DELETE\n\n\nStandard SAS change table: user physical addresses to be deleted.\n\n\n\n\n\n\nIDS_CHG.LOCATION_UPDATE\n\n\nStandard SAS change table: user physical addresses to be updated.\n\n\n\n\n\n\nIDS_CHG.LOGINS_ADD\n\n\nStandard SAS change table: user & group logins/accounts to be added.\n\n\n\n\n\n\nIDS_CHG.LOGINS_DELETE\n\n\nStandard SAS change table: user & group logins/accounts to be deleted.\n\n\n\n\n\n\nIDS_CHG.PERSON_ADD\n\n\nStandard SAS change table: users to be added.\n\n\n\n\n\n\nIDS_CHG.PERSON_DELETE\n\n\nStandard SAS change table: users to be deleted.\n\n\n\n\n\n\nIDS_CHG.PERSON_SUMMARY\n\n\nStandard SAS change table: summary of users.\n\n\n\n\n\n\nIDS_CHG.PERSON_UPDATE\n\n\nStandard SAS change table: users to be updated.\n\n\n\n\n\n\nIDS_CHG.PHONE_ADD\n\n\nStandard SAS change table: user phone numbers to be added.\n\n\n\n\n\n\nIDS_CHG.PHONE_DELETE\n\n\nStandard SAS change table: user phone numbers to be deleted.\n\n\n\n\n\n\nIDS_CHG.PHONE_UPDATE\n\n\nStandard SAS change table: user phone numbers to be updated.\n\n\n\n\n\n\n\n\nIf the IDSP \n<Options>\n tag has the \ntagDeletedIdentities\n attribute set to \ntrue\n, indicating\ntag-deletion has been requested, then these change tables will be post-processed by the Metacoda\nIdentity Sync Process to convert user and group deletions into tag-deletions (updates). Tag\ndeletion, is a reversible process, that marks SAS users and groups as ready to be manually deleted,\nand effectively disables them without destroying other metadata relationships they may have.\n\n\nWhen users and groups are tag-deleted:\n\n\n\n\nTag deleted User and Group display names are prefixed with text as specified in the IDSP\n  \n<Options>\n tag \ndeletedIdentityTag\n attribute so that they sort together (e.g. \"Bob\" becomes\n  \"[DELETED] Bob\").\n\n\nTag deleted User and Group logins are removed, so that nobody can login to the SAS platform as\n  those identities.\n\n\nTag deleted User and Group role and group memberships are removed.\n\n\n\n\nThese tag deletions will be seen as appropriate modifications to the change tables above.\nFor example this includes, but is not limited to, the IDS_CHG.PERSON_DELETE, IDS_CHG.IDGRPS_DELETE\nbeing emptied and corresponding rows added to the IDS_CHG.PERSON_UPDATE, IDS_CHG.IDGRPS_UPDATE\ntables.\n\n\nThe IDS_CHG library folder can also contain PROC METADATA XML request and response files if\nthe \n<Options>\n tag has debug set to true.",
            "title": "Using Canonical Tables"
        },
        {
            "location": "/topics/canonical-tables/#using-canonical-tables",
            "text": "As explained in  Identity Sync Profiles & Process , and shown in the diagram below,\nthe Metacoda Identity Sync Process normally uses three temporary SAS libraries for intermediate canonical \nand change tables as required by the SAS %MDU macros.   These libraries are named IDS_SRC, IDS_TGT, and IDS_CHG, for source, target and change tables\nrespectively. Unless otherwise specified in the Identity Sync Profile (IDSP), these libraries will\nbe created as subdirectories of the temporary SAS WORK library/folder for the spawned SAS Workspace\nServer instance and automatically deleted then the workspace server instance is stopped when the\nprocess completes.",
            "title": "Using Canonical Tables"
        },
        {
            "location": "/topics/canonical-tables/#switching-to-permanent-libraries",
            "text": "Whilst the temporary nature of the IDS_SRC, IDS_TGT, and IDS_CHG libraries is appropriate for\nmost scenarios, sometimes you might want to retain these tables after the identity sync process\nhas completed. This might be for troubleshooting purposes or to re-use the tables for you own\ncustom requirements.  To make these libraries permanent, you need to select or create a directory in the file system of\nthe SAS Workspace Server that will used for identity synchronisation, and ensure appropriate file\nsystem access controls to allow the workspace server operating system launch identity to create\nsub-directories and read/write SAS tables in those directories.  Once you have a location, it can be specified by editing the IDSP in a text editor and adding a\nserverBaseDir attribute to the  <Options>  tag like so:       <IdentitySyncProfile ...>\n    ...\n    <Options\n        ...\n        serverBaseDir=\u201cData/idsync\u201d\n    />\n...\n</IdentitySyncProfile>  The serverBaseDir value is a file system path that can be either relative or absolute. If a\nrelative path is specified then it is relative to the SAS Application Server directory.\nFor example, given the  Data/idsync  value specified above, if the SAS Application Server directory\nis  /opt/sas/config/Lev1/SASApp  then the following locations will be used for the three libraries:   IDS_SRC: /opt/sas/config/Lev1/SASApp/Data/idsync/ids_src   IDS_TGT: /opt/sas/config/Lev1/SASApp/Data/idsync/ids_tgt   IDS_CHG: /opt/sas/config/Lev1/SASApp/Data/idsync/ids_chg    The ids_src, ids_tgt, and ids_chg sub-directories will be automatically created if they do not\nalready exist.",
            "title": "Switching to Permanent Libraries"
        },
        {
            "location": "/topics/canonical-tables/#libraries-and-tables",
            "text": "",
            "title": "Libraries and Tables"
        },
        {
            "location": "/topics/canonical-tables/#ids_src-source-tables",
            "text": "The IDS_SRC library contains tables that represent source/master identities for synchronisation.\nThese usually contain users and groups extracted from Microsoft Active Directory.\nWhen using a Hybrid IDSP, the tables will contain combined identity information from all sources.         Table  Description      IDS_SRC.AUTHDOMAIN  Standard SAS canonical table: authentication domains.    IDS_SRC.EMAIL  Standard SAS canonical table: email addresses for users.    IDS_SRC.GRPMEMS  Standard SAS canonical table: group/role members.    IDS_SRC.IDGRPS  Standard SAS canonical table: groups/roles.    IDS_SRC.IDGRPS_X  Metacoda table: groups/roles with extra attributes (1).    IDS_SRC.IDS_EXCEPTION  Metacoda table: sync exceptions (2).    IDS_SRC.LOCATION  Standard SAS canonical table: physical addresses for users.    IDS_SRC.LOGINS  Standard SAS canonical table: logins/accounts for users & groups.    IDS_SRC.PERSON  Standard SAS canonical table: users.    IDS_SRC.PERSON_X  Metacoda table: users with extra attributes (1).    IDS_SRC.PHONE  Standard SAS canonical table: phone numbers for users.     (1) The IDS_SRC.IDGRPS_X and IDS_SRC.PERSON_X tables are only populated if the IDSP LDAPConfig\ntag has the groupOtherAttrs and userOtherAttrs attributes specified respectively.\nThese tables are copies of the corresponding IDS_SRC.IDGRPS and IDS_SRC.PERSON tables with\nadditional X_ prefixed columns for each of the additional LDAP attributes specified. These extra\nattributes are not used in the normal Metacoda Identity Sync Process but may be of use in any\ncustom processing requirements implemented in code hooks or elsewhere.   (2) The IDS_SRC.IDS_EXCEPTION table is populated by the Metacoda Identity Sync Process from the sync\nexceptions specified in the IDSP (with  <SyncException>  tags). This table is provided to the\nstandard SAS %MDUCMP macro during the identity comparison step, via the  EXCEPTIONS  parameter.",
            "title": "IDS_SRC: Source Tables"
        },
        {
            "location": "/topics/canonical-tables/#ids_tgt-target-tables",
            "text": "The IDS_TGT library contains tables that represent target identities for synchronisation: \nusers and groups currently in SAS metadata.\nThe contents of this library is generated by the use of the standard SAS %MDUEXTR macro.     Table  Description      IDS_TGT.AUTHDOMAIN  Standard SAS canonical table: authentication domains.    IDS_TGT.EMAIL  Standard SAS canonical table: email addresses for users.    IDS_TGT.EMAIL_INFO  Standard SAS canonical table: email addresses for users (additional info).    IDS_TGT.GROUP_INFO  Standard SAS canonical table: groups (additional info).    IDS_TGT.GROUPLOGINS_INFO  Standard SAS canonical table: logins/accounts for groups (additional info).    IDS_TGT.GROUPMEMGROUPS_INFO  Standard SAS canonical table: group/role group members (additional info).    IDS_TGT.GROUPMEMPERSONS_INFO  Standard SAS canonical table: group/role user members (additional info).    IDS_TGT.GRPMEMS  Standard SAS canonical table: group/role members.    IDS_TGT.IDGRPS  Standard SAS canonical table: groups/role.    IDS_TGT.LOCATION  Standard SAS canonical table: physical addresses for users.    IDS_TGT.LOCATION_INFO  Standard SAS canonical table: physical addresses for users (additional info).    IDS_TGT.LOGINS  Standard SAS canonical table: logins/accounts for users & groups.    IDS_TGT.LOGINS_INFO  Standard SAS canonical table: logins/accounts for users (additional info).    IDS_TGT.PERSON  Standard SAS canonical table: users.    IDS_TGT.PERSON_INFO  Standard SAS canonical table: users (additional info).    IDS_TGT.PHONE  Standard SAS canonical table: phone numbers for users.    IDS_TGT.PHONE_INFO  Standard SAS canonical table: phone numbers for users (additional info).",
            "title": "IDS_TGT: Target Tables"
        },
        {
            "location": "/topics/canonical-tables/#ids_chg-change-tables",
            "text": "The IDS_CHG library contains tables that represent changes required to target (SAS metadata)\nidentities to bring them back in sync with the sources identities. \nThe contents of this library is generated by the use of the standard SAS %MDUCMP macro and may be\nfurther customized by post-processing if the tag-delete feature has been enabled in the IDSP.      Table  Description      IDS_CHG.AUTHDOMAIN_ADD  Standard SAS change table: authentication domains to be added.    IDS_CHG.AUTHDOMAIN_DELETE  Standard SAS change table: authentication domains to be deleted.    IDS_CHG.AUTHDOMAIN_SUMMARY  Standard SAS change table: summary of authentication domains.    IDS_CHG.AUTHDOMAIN_UPDATE  Standard SAS change table: authentication domains to be updated.    IDS_CHG.EMAIL_ADD  Standard SAS change table: user email addresses to be added.    IDS_CHG.EMAIL_DELETE  Standard SAS change table: user email addresses to be deleted.    IDS_CHG.EMAIL_UPDATE  Standard SAS change table: user email addresses to be updated.    IDS_CHG.GRPMEMS_ADD  Standard SAS change table: members to be added to groups/roles.    IDS_CHG.GRPMEMS_DELETE  Standard SAS change table: members to be removed from groups/roles    IDS_CHG.IDGRPS_ADD  Standard SAS change table: groups to be added.    IDS_CHG.IDGRPS_DELETE  Standard SAS change table: groups to be deleted.    IDS_CHG.IDGRPS_SUMMARY  Standard SAS change table: summary of groups.    IDS_CHG.IDGRPS_UPDATE  Standard SAS change table: groups to be updated.    IDS_CHG.IDS_ERROR  A table populated if changes are not valid. See the SAS %MDUCHGV macro  ERRORSDS  parameter.    IDS_CHG.IDS_FAILED_OBJS  A table populated if changes failed to be applied to SAS metadata. See the SAS %MDUCHGLB macro  FAILEDOBJS  parameter.    IDS_CHG.LOCATION_ADD  Standard SAS change table: user physical addresses to be added.    IDS_CHG.LOCATION_DELETE  Standard SAS change table: user physical addresses to be deleted.    IDS_CHG.LOCATION_UPDATE  Standard SAS change table: user physical addresses to be updated.    IDS_CHG.LOGINS_ADD  Standard SAS change table: user & group logins/accounts to be added.    IDS_CHG.LOGINS_DELETE  Standard SAS change table: user & group logins/accounts to be deleted.    IDS_CHG.PERSON_ADD  Standard SAS change table: users to be added.    IDS_CHG.PERSON_DELETE  Standard SAS change table: users to be deleted.    IDS_CHG.PERSON_SUMMARY  Standard SAS change table: summary of users.    IDS_CHG.PERSON_UPDATE  Standard SAS change table: users to be updated.    IDS_CHG.PHONE_ADD  Standard SAS change table: user phone numbers to be added.    IDS_CHG.PHONE_DELETE  Standard SAS change table: user phone numbers to be deleted.    IDS_CHG.PHONE_UPDATE  Standard SAS change table: user phone numbers to be updated.     If the IDSP  <Options>  tag has the  tagDeletedIdentities  attribute set to  true , indicating\ntag-deletion has been requested, then these change tables will be post-processed by the Metacoda\nIdentity Sync Process to convert user and group deletions into tag-deletions (updates). Tag\ndeletion, is a reversible process, that marks SAS users and groups as ready to be manually deleted,\nand effectively disables them without destroying other metadata relationships they may have.  When users and groups are tag-deleted:   Tag deleted User and Group display names are prefixed with text as specified in the IDSP\n   <Options>  tag  deletedIdentityTag  attribute so that they sort together (e.g. \"Bob\" becomes\n  \"[DELETED] Bob\").  Tag deleted User and Group logins are removed, so that nobody can login to the SAS platform as\n  those identities.  Tag deleted User and Group role and group memberships are removed.   These tag deletions will be seen as appropriate modifications to the change tables above.\nFor example this includes, but is not limited to, the IDS_CHG.PERSON_DELETE, IDS_CHG.IDGRPS_DELETE\nbeing emptied and corresponding rows added to the IDS_CHG.PERSON_UPDATE, IDS_CHG.IDGRPS_UPDATE\ntables.  The IDS_CHG library folder can also contain PROC METADATA XML request and response files if\nthe  <Options>  tag has debug set to true.",
            "title": "IDS_CHG: Change Tables"
        },
        {
            "location": "/topics/exclusions/",
            "text": "Exclusions & Exceptions\n\n\nThere are two ways to prevent changes for specified users and groups in SAS metadata when using the\nMetacoda Identity Sync Process: Exclusions and Exceptions.\nBoth methods have the same goals: prevent specific users or groups from being added to SAS\nmetadata; and avoid updating or deleting specific SAS identity metadata.\nThere are however some differences in implementation that may make you either choose one of the\nmethods or a combination of the two.    \n\n\nAs highlighted in the diagram below, exclusions are handled during the Java-based source identity\nextraction step, whereas exceptions are handled during the SAS language based source/target\ncomparison step. More specifically, exceptions are handled using the standard SAS %MDUCMP macro's\nsupport for an exceptions table. \n\n\n\n\nExclusions\n\n\nExclusions are used to prevent certain source identities, such as Active Directory (AD) users\nand groups, from getting to the \ncanonical tables\n and being considered\nin the comparison with existing target SAS metadata identities.\nExclusions are specified in the Identity Sync Profile (IDSP) and can be added either using the\nIdentity Sync Profile Wizard or by editing the IDSP XML directly.\nThere are several reasons why you might want to exclude identities at this stage:\n\n\n\n\nYou are using a sync-basis that targets all users/groups under a certain Organizational Unit (OU)\n  in the directory, but need to exclude some users/groups that are not SAS platform related.\n\n\nYou are using a sync-basis that targets selected groups and their members but need to exclude\n  some user/group members that are not SAS platform related.\n\n\nYou might have service identities that need to be ignored and, as group members or descendants\n  of an OU, would otherwise be targeted for synchronisation.\n\n\n\n\nOne of the key ways that exclusions differ from exceptions is in the handling of excluded group\nmembers. During source identity extraction, if a group is excluded then its members are ignored.\nThis includes nested groups and their members too. A member of an excluded group will then only be\nincluded if it is either explicitly included in the IDSP, or is a member of another group which\nhas not been excluded. This differs from exceptions in that if a group is ignored during exception\nprocessing then it has no bearing on that groups members (unless the filter condition is such that\nit affects some members too). This difference in the handling of exclusions and exceptions can be\nused beneficially. If you want to ignore a group and its members use an exclusion. If you\nwant to ignore the group but keep its members use an exception instead.\n\n\nAnother difference is in support for wildcards. Exclusions target a specific identity without\nsupport for wildcards. Exceptions, as SAS WHERE clause expressions, support\nthe use of wildcards to ignore a set of identities based on similarities in their names for\nexample.  If you need wildcard support choose exceptions over exclusions.\n\n\nThe following fragment shows how user and group exclusions are represented in an IDSP: \n\n\n<IdentitySyncProfile ...>\n  ...\n  <GroupSync ...>\n    ...\n    <ExcludedGroups>\n      <Group name=\"Group1\" dn=\"CN=Group1,CN=Users,DC=corp,DC=example,DC=com\" guid=\"4db9ff77-2096-4748-b0ce-7b0f3aa7942d\"/>\n      <Group name=\"Group2\" dn=\"CN=Group2,CN=Users,DC=corp,DC=example,DC=com\" guid=\"acbf94df-d5ac-46ec-be3c-feb5880b2be3\"/>\n    </ExcludedGroups>\n    ...\n  </GroupSync>\n  <UserSync ... excludeDisabledAccounts=\"false\">\n    <ExcludedUsers>\n      <User name=\"User1\" dn=\"CN=User1,CN=Users,DC=corp,DC=example,DC=com\" guid=\"4c1f064a-865e-4359-b9b6-6580b3dfc80f\"/>\n      <User name=\"User2\" dn=\"CN=User2,CN=Users,DC=corp,DC=example,DC=com\" guid=\"34be56af-c639-4ac7-96f5-11ce0690ebfb\"/>\n      ...\n    </ExcludedUsers>\n  </UserSync>\n  ...\n</IdentitySyncProfile>\n\n\n\nGroup exclusions are specified using \n<Group>\n tags inside an \n<ExcludedGroups>\n tag in the main\n\n<GroupSync>\n tag. Similarly user exclusions are specified as \n<User>\n tags inside the\n\n<ExcludedUser>\n tag in the main \n<UserSync>\n tag. The users and groups are identified primarily\nvia the \nguid\n attribute value. If a guid is not specified, or an identity with that guid cannot be\nlocated, the \ndn\n attribute value, if specified, is used to locate the source identity instead.\nIf a source identity cannot be found by guid or dn a warning is logged and the exclusion\nignored.\nThe \nname\n attr is not used for locating identities. It is primarily used to make it easier for\npeople to locate the correct tag when editing an IDSP.\n\n\nAfter an excluded identity has been found, any differences between the directory and IDSP with\nrespect to guid, dn and name attributes is logged. Any differences in guid values are logged as\nwarnings (because it is unexpected and may well be a copy/paste error).\n\n\nBy default, any Active Directory users whose accounts have been marked as disabled in AD are\nstill extracted (given they still exist in AD). If you want to automatically exclude those users\nyou can add \nexcludeDisabledAccounts=\"false\"\n to the \n<UserSync>\n tag. Those disabled user accounts\nwill no longer be loaded into the canonical tables and, if previously linked with SAS identities,\nwill get deleted or tag-deleted. Support for the \nexcludeDisabledAccounts\n attribute was added\nin Metacoda Plug-ins version 6.0 R4. It can also be specified in the Identity Sync Profile Wizard.   \n\n\nExceptions\n\n\nAs described above, exceptions provide a way to ignore specified identity metadata during the\nsource (AD) and target (SAS metadata) identity comparison step. This is a standard feature of\nthe SAS %MDUCMP macro which has a parameter to accept a table of exceptions.\n\n\nYou can also use this exceptions feature in the Metacoda Identity Sync Plug-in. When used inside\nSAS Management Console, the Identity Sync Plug-in allows you to interactively select identity\nmetadata in the changes preview and add corresponding rows to an exceptions table. You can also\nview the contents of the exceptions table and remove any unwanted rows. The exceptions table is\ninitially populated with rows to ignore many well-known pre-defined SAS users, groups, and roles\n(in case you happen to have external identities with the same names). Any changes you make to the\nexceptions table in the Metacoda Identity Sync Plug-in are stored inside the IDSP. \n\n\nThe Metacoda Identity Sync Plug-in does not yet provide the ability to edit sync exceptions\n(other than to add or delete them). If you want to edit an existing exception, such as to change\nthe filter condition or add a wildcard filter, it needs to be done by editing the IDSP XML in a\ntext editor.\n\n\nThe fragment below shows how exceptions are stored in an IDSP: \n\n\n<IdentitySyncProfile ...>\n  ...\n  <SyncExceptions>\n    <SyncException tableName=\"IdGrps\" filter=\"upcase(keyid) = &quot;a2c48426-1538-4a41-a4c6-635eb191f15d&quot;\"/>\n    <SyncException tableName=\"IdGrps\" filter=\"upcase(name) = &quot;TEST_GROUP&quot;\"/>\n    <SyncException tableName=\"Person\" filter=\"upcase(name) = &quot;TEST&quot;\"/>\n    <SyncException tableName=\"Person\" filter=\"upcase(name) like &quot;SAS%&quot;\"/>\n    ...\n  </SyncExceptions>\n</IdentitySyncProfile>\n\n\n\nEach \n<SyncException>\n tag is used to populate a row in the IDS_SRC.IDS_EXCEPTION table, as\nprovided to the %MDUCMP macro, with the tableName and filter attribute values inserted into\ntable columns with the same names.\nNotice that the SAS WHERE expressions in the filter attributes need to be appropriately XML encoded.\n\n\nThe fragment above has four exceptions to:\n\n\n\n\nignore a group by keyId value (an AD objectGUID in this case)\n\n\nignore a group by name (TEST_GROUP)\n\n\nignore a user by name (TEST)\n\n\nignore a set of users using a wildcard (names that start with SAS)\n\n\n\n\nFor more information on the exceptions table see the \nDetails\n section in the\n\n%MDUCMP\n\npage of the \nUser Import Macros\n appendix in the \nSAS\u00ae 9.4 Intelligence Platform: Security\nAdministration Guide\n.",
            "title": "Exclusions & Exceptions"
        },
        {
            "location": "/topics/exclusions/#exclusions-exceptions",
            "text": "There are two ways to prevent changes for specified users and groups in SAS metadata when using the\nMetacoda Identity Sync Process: Exclusions and Exceptions.\nBoth methods have the same goals: prevent specific users or groups from being added to SAS\nmetadata; and avoid updating or deleting specific SAS identity metadata.\nThere are however some differences in implementation that may make you either choose one of the\nmethods or a combination of the two.      As highlighted in the diagram below, exclusions are handled during the Java-based source identity\nextraction step, whereas exceptions are handled during the SAS language based source/target\ncomparison step. More specifically, exceptions are handled using the standard SAS %MDUCMP macro's\nsupport for an exceptions table.",
            "title": "Exclusions &amp; Exceptions"
        },
        {
            "location": "/topics/exclusions/#exclusions",
            "text": "Exclusions are used to prevent certain source identities, such as Active Directory (AD) users\nand groups, from getting to the  canonical tables  and being considered\nin the comparison with existing target SAS metadata identities.\nExclusions are specified in the Identity Sync Profile (IDSP) and can be added either using the\nIdentity Sync Profile Wizard or by editing the IDSP XML directly.\nThere are several reasons why you might want to exclude identities at this stage:   You are using a sync-basis that targets all users/groups under a certain Organizational Unit (OU)\n  in the directory, but need to exclude some users/groups that are not SAS platform related.  You are using a sync-basis that targets selected groups and their members but need to exclude\n  some user/group members that are not SAS platform related.  You might have service identities that need to be ignored and, as group members or descendants\n  of an OU, would otherwise be targeted for synchronisation.   One of the key ways that exclusions differ from exceptions is in the handling of excluded group\nmembers. During source identity extraction, if a group is excluded then its members are ignored.\nThis includes nested groups and their members too. A member of an excluded group will then only be\nincluded if it is either explicitly included in the IDSP, or is a member of another group which\nhas not been excluded. This differs from exceptions in that if a group is ignored during exception\nprocessing then it has no bearing on that groups members (unless the filter condition is such that\nit affects some members too). This difference in the handling of exclusions and exceptions can be\nused beneficially. If you want to ignore a group and its members use an exclusion. If you\nwant to ignore the group but keep its members use an exception instead.  Another difference is in support for wildcards. Exclusions target a specific identity without\nsupport for wildcards. Exceptions, as SAS WHERE clause expressions, support\nthe use of wildcards to ignore a set of identities based on similarities in their names for\nexample.  If you need wildcard support choose exceptions over exclusions.  The following fragment shows how user and group exclusions are represented in an IDSP:   <IdentitySyncProfile ...>\n  ...\n  <GroupSync ...>\n    ...\n    <ExcludedGroups>\n      <Group name=\"Group1\" dn=\"CN=Group1,CN=Users,DC=corp,DC=example,DC=com\" guid=\"4db9ff77-2096-4748-b0ce-7b0f3aa7942d\"/>\n      <Group name=\"Group2\" dn=\"CN=Group2,CN=Users,DC=corp,DC=example,DC=com\" guid=\"acbf94df-d5ac-46ec-be3c-feb5880b2be3\"/>\n    </ExcludedGroups>\n    ...\n  </GroupSync>\n  <UserSync ... excludeDisabledAccounts=\"false\">\n    <ExcludedUsers>\n      <User name=\"User1\" dn=\"CN=User1,CN=Users,DC=corp,DC=example,DC=com\" guid=\"4c1f064a-865e-4359-b9b6-6580b3dfc80f\"/>\n      <User name=\"User2\" dn=\"CN=User2,CN=Users,DC=corp,DC=example,DC=com\" guid=\"34be56af-c639-4ac7-96f5-11ce0690ebfb\"/>\n      ...\n    </ExcludedUsers>\n  </UserSync>\n  ...\n</IdentitySyncProfile>  Group exclusions are specified using  <Group>  tags inside an  <ExcludedGroups>  tag in the main <GroupSync>  tag. Similarly user exclusions are specified as  <User>  tags inside the <ExcludedUser>  tag in the main  <UserSync>  tag. The users and groups are identified primarily\nvia the  guid  attribute value. If a guid is not specified, or an identity with that guid cannot be\nlocated, the  dn  attribute value, if specified, is used to locate the source identity instead.\nIf a source identity cannot be found by guid or dn a warning is logged and the exclusion\nignored.\nThe  name  attr is not used for locating identities. It is primarily used to make it easier for\npeople to locate the correct tag when editing an IDSP.  After an excluded identity has been found, any differences between the directory and IDSP with\nrespect to guid, dn and name attributes is logged. Any differences in guid values are logged as\nwarnings (because it is unexpected and may well be a copy/paste error).  By default, any Active Directory users whose accounts have been marked as disabled in AD are\nstill extracted (given they still exist in AD). If you want to automatically exclude those users\nyou can add  excludeDisabledAccounts=\"false\"  to the  <UserSync>  tag. Those disabled user accounts\nwill no longer be loaded into the canonical tables and, if previously linked with SAS identities,\nwill get deleted or tag-deleted. Support for the  excludeDisabledAccounts  attribute was added\nin Metacoda Plug-ins version 6.0 R4. It can also be specified in the Identity Sync Profile Wizard.",
            "title": "Exclusions"
        },
        {
            "location": "/topics/exclusions/#exceptions",
            "text": "As described above, exceptions provide a way to ignore specified identity metadata during the\nsource (AD) and target (SAS metadata) identity comparison step. This is a standard feature of\nthe SAS %MDUCMP macro which has a parameter to accept a table of exceptions.  You can also use this exceptions feature in the Metacoda Identity Sync Plug-in. When used inside\nSAS Management Console, the Identity Sync Plug-in allows you to interactively select identity\nmetadata in the changes preview and add corresponding rows to an exceptions table. You can also\nview the contents of the exceptions table and remove any unwanted rows. The exceptions table is\ninitially populated with rows to ignore many well-known pre-defined SAS users, groups, and roles\n(in case you happen to have external identities with the same names). Any changes you make to the\nexceptions table in the Metacoda Identity Sync Plug-in are stored inside the IDSP.   The Metacoda Identity Sync Plug-in does not yet provide the ability to edit sync exceptions\n(other than to add or delete them). If you want to edit an existing exception, such as to change\nthe filter condition or add a wildcard filter, it needs to be done by editing the IDSP XML in a\ntext editor.  The fragment below shows how exceptions are stored in an IDSP:   <IdentitySyncProfile ...>\n  ...\n  <SyncExceptions>\n    <SyncException tableName=\"IdGrps\" filter=\"upcase(keyid) = &quot;a2c48426-1538-4a41-a4c6-635eb191f15d&quot;\"/>\n    <SyncException tableName=\"IdGrps\" filter=\"upcase(name) = &quot;TEST_GROUP&quot;\"/>\n    <SyncException tableName=\"Person\" filter=\"upcase(name) = &quot;TEST&quot;\"/>\n    <SyncException tableName=\"Person\" filter=\"upcase(name) like &quot;SAS%&quot;\"/>\n    ...\n  </SyncExceptions>\n</IdentitySyncProfile>  Each  <SyncException>  tag is used to populate a row in the IDS_SRC.IDS_EXCEPTION table, as\nprovided to the %MDUCMP macro, with the tableName and filter attribute values inserted into\ntable columns with the same names.\nNotice that the SAS WHERE expressions in the filter attributes need to be appropriately XML encoded.  The fragment above has four exceptions to:   ignore a group by keyId value (an AD objectGUID in this case)  ignore a group by name (TEST_GROUP)  ignore a user by name (TEST)  ignore a set of users using a wildcard (names that start with SAS)   For more information on the exceptions table see the  Details  section in the %MDUCMP \npage of the  User Import Macros  appendix in the  SAS\u00ae 9.4 Intelligence Platform: Security\nAdministration Guide .",
            "title": "Exceptions"
        },
        {
            "location": "/sasautos/",
            "text": "SAS Macros: Overview\n\n\nAll SAS macros in this repository are named with a metacoda prefix to avoid name clashes with any\nof your existing SAS macros.\n\n\nAdditionally, although the example usages show mixed case macro names, the macro source file names\nare always maintained in lower case to support their use as part of the SAS autocall macro facility,\nwhich transforms macro names to lower case file names before searching for them in the SASAUTOS file\nsystem search path.\nFor more info see \nGuidelines for Naming Macro Files\n in the\n\nUsing Autocall Libraries in UNIX Environments\n\nsection of the \nSAS 9.4 Companion for UNIX Environments\n.\n\n\nThe following SAS macros are provided in this repository.\n\n\n\n\n%metacodaAuthDomainExtract\n: Extract AuthenticationDomain objects from SAS metadata. \n\n\n%metacodaExtIdExtract\n: Extract ExternalIdentity objects from SAS metadata. \n\n\n%metacodaExtIdUpdate\n: Update ExternalIdentity objects in SAS metadata.\n\n\n%metacodaIdentityGroupExtract\n: Extract IdentityGroup (group and role) objects from SAS metadata. \n\n\n%metacodaIdentityLoginExtract\n: Extract Login (account) objects associated with Identity (user and/or group) objects in SAS metadata. \n\n\n%metacodaIdGroupMembersExtract\n: Extract SAS IdentityGroup (group and role) members metadata.\n\n\n%metacodaPersonEmailExtract\n: Extract Email (address) objects associated with Person (user) objects in SAS metadata. \n\n\n%metacodaPersonExtract\n: Extract Person (user) objects from SAS metadata. \n\n\n%metacodaPersonIntLoginExtract\n: Extract InternalLogin (account) objects associated with Person (user) objects in SAS metadata. \n\n\n%metacodaPersonLocationExtract\n: Extract Location (physical address) objects associated with Person (user) objects in SAS metadata. \n\n\n%metacodaPersonPhoneExtract\n: Extract Phone (number) objects associated with Person (user) objects in SAS metadata. \n\n\n%metacodaXMLEncode\n: Encode text for use in XML files or streams.",
            "title": "Overview"
        },
        {
            "location": "/sasautos/#sas-macros-overview",
            "text": "All SAS macros in this repository are named with a metacoda prefix to avoid name clashes with any\nof your existing SAS macros.  Additionally, although the example usages show mixed case macro names, the macro source file names\nare always maintained in lower case to support their use as part of the SAS autocall macro facility,\nwhich transforms macro names to lower case file names before searching for them in the SASAUTOS file\nsystem search path.\nFor more info see  Guidelines for Naming Macro Files  in the Using Autocall Libraries in UNIX Environments \nsection of the  SAS 9.4 Companion for UNIX Environments .  The following SAS macros are provided in this repository.   %metacodaAuthDomainExtract : Extract AuthenticationDomain objects from SAS metadata.   %metacodaExtIdExtract : Extract ExternalIdentity objects from SAS metadata.   %metacodaExtIdUpdate : Update ExternalIdentity objects in SAS metadata.  %metacodaIdentityGroupExtract : Extract IdentityGroup (group and role) objects from SAS metadata.   %metacodaIdentityLoginExtract : Extract Login (account) objects associated with Identity (user and/or group) objects in SAS metadata.   %metacodaIdGroupMembersExtract : Extract SAS IdentityGroup (group and role) members metadata.  %metacodaPersonEmailExtract : Extract Email (address) objects associated with Person (user) objects in SAS metadata.   %metacodaPersonExtract : Extract Person (user) objects from SAS metadata.   %metacodaPersonIntLoginExtract : Extract InternalLogin (account) objects associated with Person (user) objects in SAS metadata.   %metacodaPersonLocationExtract : Extract Location (physical address) objects associated with Person (user) objects in SAS metadata.   %metacodaPersonPhoneExtract : Extract Phone (number) objects associated with Person (user) objects in SAS metadata.   %metacodaXMLEncode : Encode text for use in XML files or streams.",
            "title": "SAS Macros: Overview"
        },
        {
            "location": "/sasautos/metacodaAuthDomainExtract/",
            "text": "SAS Macro: %metacodaAuthDomainExtract\n\n\nPurpose\n\n\nThis macro is used to extract basic attribute values for AuthenticationDomain objects from\nSAS metadata.\n\n\nParameters\n\n\n%macro metacodaAuthDomainExtract(\n   table=,\n   xmlDir=,\n   debug=0\n   );\n\n\n\nThis macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.\n\n\ntable\n: \n(MANDATORY)\n\n\nThe output table name (1 or 2 level) that will be overwritten.\n\n\nxmlDir\n: \n(OPTIONAL)\n\n\nPath to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.\n\n\ndebug\n: \n(OPTIONAL)\n\n\nA flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.\n\n\nExamples\n\n\nExtract basic metadata attributes for all AuthenticationDomain objects:\n\n\n%metacodaAuthDomainExtract(table=work.authDomains)\n\n\n\nFor more examples see \nmetacodaAuthDomainExtractSample.sas\n.",
            "title": "%metacodaAuthDomainExtract"
        },
        {
            "location": "/sasautos/metacodaAuthDomainExtract/#sas-macro-metacodaauthdomainextract",
            "text": "",
            "title": "SAS Macro: %metacodaAuthDomainExtract"
        },
        {
            "location": "/sasautos/metacodaAuthDomainExtract/#purpose",
            "text": "This macro is used to extract basic attribute values for AuthenticationDomain objects from\nSAS metadata.",
            "title": "Purpose"
        },
        {
            "location": "/sasautos/metacodaAuthDomainExtract/#parameters",
            "text": "%macro metacodaAuthDomainExtract(\n   table=,\n   xmlDir=,\n   debug=0\n   );  This macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.  table :  (MANDATORY)  The output table name (1 or 2 level) that will be overwritten.  xmlDir :  (OPTIONAL)  Path to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.  debug :  (OPTIONAL)  A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.",
            "title": "Parameters"
        },
        {
            "location": "/sasautos/metacodaAuthDomainExtract/#examples",
            "text": "Extract basic metadata attributes for all AuthenticationDomain objects:  %metacodaAuthDomainExtract(table=work.authDomains)  For more examples see  metacodaAuthDomainExtractSample.sas .",
            "title": "Examples"
        },
        {
            "location": "/sasautos/metacodaExtIdExtract/",
            "text": "SAS Macro: %metacodaExtIdExtract\n\n\nPurpose\n\n\nThis macro is used to extract basic attribute values for ExternalIdentity objects from SAS metadata.\nExternalIdentity objects are created during identity synchronisation with external identity sources\nsuch as Microsoft Active Directory. They contain the 3rd party keys for those external users and\ngroups that allow us to re-locate those external identities when a subsequent sync is done, ideally\neven when the external users and groups are renamed or moved into another part of the directory.\n\n\nParameters\n\n\n%macro metacodaExtIdExtract(\n   table=,\n   context=,\n   associatedModelType=,\n   xmlDir=,\n   debug=0\n   );\n\n\n\nThis macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.\n\n\ntable\n: \n(MANDATORY)\n\n\nThe output table name (1 or 2 level) that will be overwritten.\n\n\ncontext\n: \n(OPTIONAL)\n\n\nIf specified, will limit the output to ExternalIdentity objects with the specified Context\nattribute value. e.g. Active Directory Import\n\n\nassociatedModelType\n: \n(OPTIONAL)\n\n\nIf specified, will limit the output to ExternalIdentity objects that are associated with metadata\nobjects of the specified model type. e.g. Person or IdentityGroup\n\n\nxmlDir\n: \n(OPTIONAL)\n\n\nPath to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.\n\n\ndebug\n: \n(OPTIONAL)\n\n\nA flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.\n\n\nExamples\n\n\nExtract external identity metadata for all AD-synced users:\n\n\n%metacodaExtIdExtract(\n    table=work.adUserExtIds,\n    context=Active Directory Import,\n    associatedModelType=Person\n    )\n\n\n\nExtract external identity metadata for all AD-synced groups:\n\n\n%metacodaExtIdExtract(\n    table=work.adGroupExtIds,\n    context=Active Directory Import,\n    associatedModelType=IdentityGroup\n    )\n\n\n\nFor more examples see \nmetacodaExtIdExtractSample.sas\n.",
            "title": "%metacodaExtIdExtract"
        },
        {
            "location": "/sasautos/metacodaExtIdExtract/#sas-macro-metacodaextidextract",
            "text": "",
            "title": "SAS Macro: %metacodaExtIdExtract"
        },
        {
            "location": "/sasautos/metacodaExtIdExtract/#purpose",
            "text": "This macro is used to extract basic attribute values for ExternalIdentity objects from SAS metadata.\nExternalIdentity objects are created during identity synchronisation with external identity sources\nsuch as Microsoft Active Directory. They contain the 3rd party keys for those external users and\ngroups that allow us to re-locate those external identities when a subsequent sync is done, ideally\neven when the external users and groups are renamed or moved into another part of the directory.",
            "title": "Purpose"
        },
        {
            "location": "/sasautos/metacodaExtIdExtract/#parameters",
            "text": "%macro metacodaExtIdExtract(\n   table=,\n   context=,\n   associatedModelType=,\n   xmlDir=,\n   debug=0\n   );  This macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.  table :  (MANDATORY)  The output table name (1 or 2 level) that will be overwritten.  context :  (OPTIONAL)  If specified, will limit the output to ExternalIdentity objects with the specified Context\nattribute value. e.g. Active Directory Import  associatedModelType :  (OPTIONAL)  If specified, will limit the output to ExternalIdentity objects that are associated with metadata\nobjects of the specified model type. e.g. Person or IdentityGroup  xmlDir :  (OPTIONAL)  Path to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.  debug :  (OPTIONAL)  A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.",
            "title": "Parameters"
        },
        {
            "location": "/sasautos/metacodaExtIdExtract/#examples",
            "text": "Extract external identity metadata for all AD-synced users:  %metacodaExtIdExtract(\n    table=work.adUserExtIds,\n    context=Active Directory Import,\n    associatedModelType=Person\n    )  Extract external identity metadata for all AD-synced groups:  %metacodaExtIdExtract(\n    table=work.adGroupExtIds,\n    context=Active Directory Import,\n    associatedModelType=IdentityGroup\n    )  For more examples see  metacodaExtIdExtractSample.sas .",
            "title": "Examples"
        },
        {
            "location": "/sasautos/metacodaExtIdUpdate/",
            "text": "SAS Macro: %metacodaExtIdUpdate\n\n\nWARNING\n\n\nWARNING: THIS MACRO UPDATES SAS METADATA.\n\n\nWhen provided with correct parameters, and running in an environment with valid SAS metadata\noptions, this macro will update SAS metadata ExternalIdentity objects which may break any existing\nidentity sync process you current have operating, and has the potential to DELETE users and group\nat the next sync operation unless you have delete-protection in your sync process.\n\n\nDo not modify and run this program unless it is your intention to update ExternalIdentity metadata,\nyou are fully aware of the potential consequences, and are confident you have adequate SAS metadata\nbackups so you can revert the process if required.\n\n\nIf you are unsure please contact Metacoda Support \nsupport@metacoda.com\n\nto discuss further.\n\n\nPurpose\n\n\nThis macro is used to update basic attribute values for existing ExternalIdentity objects from SAS\nmetadata.\n\n\nExternalIdentity objects are used to maintain unique identifiers in metadata that link SAS\nidentities to external identities (such as Microsoft Active Directory users & groups).\n\n\nThe metacodaExtIdUpdate macro can be used as part of a process to perform a bulk update of keyId\nvalues if you want to migrate the type of unique identifier you are using for identity sync.\nFor example you might want to switch from using sAMAccountName to objectGUID for users, and switch\nfrom using distinguishedName to objectGUID. By switching to objectGUID we can take advantage of a\nbetter choice for an unchanging unique id for objects in Active Directory.\n\n\nThe macro takes a table of ExternalIdentity metadata object ids and new identifier (keyId) values\nand applies those new values to SAS metadata.\n\n\nParameters\n\n\n%macro metacodaExtIdUpdate(\n   table=,\n   extIdObjIdColName=,\n   extIdNewIdentifierColName=,\n   xmlDir=,\n   debug=0\n   );\n\n\n\nThis macro accepts several mandatory and optional named parameters to identify a SAS table and\ncolumns as input and used SAS PROC METADATA to update metadata according to the table contents. \n\n\ntable\n: \n(MANDATORY)\n\n\nThe (1 or 2 level) name of an input table containing the ExternalIdentity Identifier values to\nupdate.\n\n\nextIdObjIdColName\n: \n(MANDATORY)\n\n\nThe name of the column in the supplied table that contains the metadata object id values for the\nExternalIdentity objects to be updated.\n\n\nextIdNewIdentifierColName\n: \n(MANDATORY)\n\n\nThe name of the column in the supplied table that contains the new ExternalIdentity Identifier\nvalues.\n\n\nxmlDir\n: \n(OPTIONAL)\n\n\nPath to a directory where PROC METADATA request and response XML files will be written. If\nunspecified the work directory path will be used by default.\n\n\ndebug\n: \n(OPTIONAL)\n\n\nA flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.\n\n\nExamples\n\n\nUpdate ExternalIdentity Identifier (keyId) values for AD-synced users:\n\n\n%metacodaExtIdUpdate(\n    table=work.userExtIdUpdate,\n    extIdObjIdColName=extIdObjId,\n    extIdNewIdentifierColName=extIdNewIdentifier\n    )\n\n\n\nUpdate ExternalIdentity Identifier (keyId) values for AD-synced groups:\n\n\n%metacodaExtIdUpdate(\n    table=groupExtIdUpdate,\n    extIdObjIdColName=extIdObjId,\n    extIdNewIdentifierColName=extIdNewIdentifier\n    )\n\n\n\nSee the sample \nmetacodaExtIdUpdateSample.sas\n for a more\nin-depth example of how a keyId migration can be done with the help of the Metacoda Identity Sync\nPlug-in.",
            "title": "%metacodaExtIdUpdate"
        },
        {
            "location": "/sasautos/metacodaExtIdUpdate/#sas-macro-metacodaextidupdate",
            "text": "",
            "title": "SAS Macro: %metacodaExtIdUpdate"
        },
        {
            "location": "/sasautos/metacodaExtIdUpdate/#warning",
            "text": "WARNING: THIS MACRO UPDATES SAS METADATA.  When provided with correct parameters, and running in an environment with valid SAS metadata\noptions, this macro will update SAS metadata ExternalIdentity objects which may break any existing\nidentity sync process you current have operating, and has the potential to DELETE users and group\nat the next sync operation unless you have delete-protection in your sync process.  Do not modify and run this program unless it is your intention to update ExternalIdentity metadata,\nyou are fully aware of the potential consequences, and are confident you have adequate SAS metadata\nbackups so you can revert the process if required.  If you are unsure please contact Metacoda Support  support@metacoda.com \nto discuss further.",
            "title": "WARNING"
        },
        {
            "location": "/sasautos/metacodaExtIdUpdate/#purpose",
            "text": "This macro is used to update basic attribute values for existing ExternalIdentity objects from SAS\nmetadata.  ExternalIdentity objects are used to maintain unique identifiers in metadata that link SAS\nidentities to external identities (such as Microsoft Active Directory users & groups).  The metacodaExtIdUpdate macro can be used as part of a process to perform a bulk update of keyId\nvalues if you want to migrate the type of unique identifier you are using for identity sync.\nFor example you might want to switch from using sAMAccountName to objectGUID for users, and switch\nfrom using distinguishedName to objectGUID. By switching to objectGUID we can take advantage of a\nbetter choice for an unchanging unique id for objects in Active Directory.  The macro takes a table of ExternalIdentity metadata object ids and new identifier (keyId) values\nand applies those new values to SAS metadata.",
            "title": "Purpose"
        },
        {
            "location": "/sasautos/metacodaExtIdUpdate/#parameters",
            "text": "%macro metacodaExtIdUpdate(\n   table=,\n   extIdObjIdColName=,\n   extIdNewIdentifierColName=,\n   xmlDir=,\n   debug=0\n   );  This macro accepts several mandatory and optional named parameters to identify a SAS table and\ncolumns as input and used SAS PROC METADATA to update metadata according to the table contents.   table :  (MANDATORY)  The (1 or 2 level) name of an input table containing the ExternalIdentity Identifier values to\nupdate.  extIdObjIdColName :  (MANDATORY)  The name of the column in the supplied table that contains the metadata object id values for the\nExternalIdentity objects to be updated.  extIdNewIdentifierColName :  (MANDATORY)  The name of the column in the supplied table that contains the new ExternalIdentity Identifier\nvalues.  xmlDir :  (OPTIONAL)  Path to a directory where PROC METADATA request and response XML files will be written. If\nunspecified the work directory path will be used by default.  debug :  (OPTIONAL)  A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.",
            "title": "Parameters"
        },
        {
            "location": "/sasautos/metacodaExtIdUpdate/#examples",
            "text": "Update ExternalIdentity Identifier (keyId) values for AD-synced users:  %metacodaExtIdUpdate(\n    table=work.userExtIdUpdate,\n    extIdObjIdColName=extIdObjId,\n    extIdNewIdentifierColName=extIdNewIdentifier\n    )  Update ExternalIdentity Identifier (keyId) values for AD-synced groups:  %metacodaExtIdUpdate(\n    table=groupExtIdUpdate,\n    extIdObjIdColName=extIdObjId,\n    extIdNewIdentifierColName=extIdNewIdentifier\n    )  See the sample  metacodaExtIdUpdateSample.sas  for a more\nin-depth example of how a keyId migration can be done with the help of the Metacoda Identity Sync\nPlug-in.",
            "title": "Examples"
        },
        {
            "location": "/sasautos/metacodaIdentityGroupExtract/",
            "text": "SAS Macro: %metacodaIdentityGroupExtract\n\n\nPurpose\n\n\nThis macro is used to extract basic attribute values for IdentityGroup objects (groups and roles)\nfrom SAS metadata.\n\n\nParameters\n\n\n%macro metacodaIdentityGroupExtract(\n   table=,\n   xmlDir=,\n   debug=0\n   );\n\n\n\nThis macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.\n\n\ntable\n: \n(MANDATORY)\n\n\nThe output table name (1 or 2 level) that will be overwritten.\n\n\nxmlDir\n: \n(OPTIONAL)\n\n\nPath to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.\n\n\ndebug\n: \n(OPTIONAL)\n\n\nA flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.\n\n\nExamples\n\n\nExtract basic metadata attributes for all groups and roles:\n\n\n%metacodaIdentityGroupExtract(table=work.idGroups)\n\n\n\nFor more examples see \nmetacodaIdentityGroupExtractSample.sas\n.",
            "title": "%metacodaIdentityGroupExtract"
        },
        {
            "location": "/sasautos/metacodaIdentityGroupExtract/#sas-macro-metacodaidentitygroupextract",
            "text": "",
            "title": "SAS Macro: %metacodaIdentityGroupExtract"
        },
        {
            "location": "/sasautos/metacodaIdentityGroupExtract/#purpose",
            "text": "This macro is used to extract basic attribute values for IdentityGroup objects (groups and roles)\nfrom SAS metadata.",
            "title": "Purpose"
        },
        {
            "location": "/sasautos/metacodaIdentityGroupExtract/#parameters",
            "text": "%macro metacodaIdentityGroupExtract(\n   table=,\n   xmlDir=,\n   debug=0\n   );  This macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.  table :  (MANDATORY)  The output table name (1 or 2 level) that will be overwritten.  xmlDir :  (OPTIONAL)  Path to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.  debug :  (OPTIONAL)  A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.",
            "title": "Parameters"
        },
        {
            "location": "/sasautos/metacodaIdentityGroupExtract/#examples",
            "text": "Extract basic metadata attributes for all groups and roles:  %metacodaIdentityGroupExtract(table=work.idGroups)  For more examples see  metacodaIdentityGroupExtractSample.sas .",
            "title": "Examples"
        },
        {
            "location": "/sasautos/metacodaIdentityLoginExtract/",
            "text": "SAS Macro: %metacodaIdentityLoginExtract\n\n\nPurpose\n\n\nThis macro is used to extract basic attribute values for SAS metadata Login (account)\nobjects that are associated with Identity (user and/or group) objects.\n\n\nParameters\n\n\n%macro metacodaIdentityLoginExtract(\n   table=,\n   identityType=,\n   append=0,\n   xmlDir=,\n   debug=0\n   );\n\n\n\nThis macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.\n\n\ntable\n: \n(MANDATORY)\n\n\nThe output table name (1 or 2 level) that will be overwritten (or appended to).\n\n\nidentityType\n: \n(OPTIONAL)\n\n\nThe SAS metadata model type for the type of identity whose Logins will be extracted.\nThe value must be either blank, Person, or IdentityGroup.\nIf the value is blank then Logins for both Person (user) and IdentityGroup (group) types will be\nextracted. The default is blank.\n\n\nappend\n: \n(OPTIONAL)\n\n\nA flag (0/1) indicating whether to overwrite or append to the specified table.\nThe default is zero to overwrite.\nThis parameter is ignored when the identityType parameter is blank (and the table will be\noverwritten).\n\n\nxmlDir\n: \n(OPTIONAL)\n\n\nPath to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.\n\n\ndebug\n: \n(OPTIONAL)\n\n\nA flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.\n\n\nExamples\n\n\nExtract login metadata for all users and groups:\n\n\n%metacodaIdentityLoginExtract(table=work.identityLogins)\n\n\n\nFor more examples see \nmetacodaIdentityLoginExtractSample.sas\n.",
            "title": "%metacodaIdentityLoginExtract"
        },
        {
            "location": "/sasautos/metacodaIdentityLoginExtract/#sas-macro-metacodaidentityloginextract",
            "text": "",
            "title": "SAS Macro: %metacodaIdentityLoginExtract"
        },
        {
            "location": "/sasautos/metacodaIdentityLoginExtract/#purpose",
            "text": "This macro is used to extract basic attribute values for SAS metadata Login (account)\nobjects that are associated with Identity (user and/or group) objects.",
            "title": "Purpose"
        },
        {
            "location": "/sasautos/metacodaIdentityLoginExtract/#parameters",
            "text": "%macro metacodaIdentityLoginExtract(\n   table=,\n   identityType=,\n   append=0,\n   xmlDir=,\n   debug=0\n   );  This macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.  table :  (MANDATORY)  The output table name (1 or 2 level) that will be overwritten (or appended to).  identityType :  (OPTIONAL)  The SAS metadata model type for the type of identity whose Logins will be extracted.\nThe value must be either blank, Person, or IdentityGroup.\nIf the value is blank then Logins for both Person (user) and IdentityGroup (group) types will be\nextracted. The default is blank.  append :  (OPTIONAL)  A flag (0/1) indicating whether to overwrite or append to the specified table.\nThe default is zero to overwrite.\nThis parameter is ignored when the identityType parameter is blank (and the table will be\noverwritten).  xmlDir :  (OPTIONAL)  Path to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.  debug :  (OPTIONAL)  A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.",
            "title": "Parameters"
        },
        {
            "location": "/sasautos/metacodaIdentityLoginExtract/#examples",
            "text": "Extract login metadata for all users and groups:  %metacodaIdentityLoginExtract(table=work.identityLogins)  For more examples see  metacodaIdentityLoginExtractSample.sas .",
            "title": "Examples"
        },
        {
            "location": "/sasautos/metacodaIdGroupMembersExtract/",
            "text": "SAS Macro: %metacodaIdGroupMembersExtract\n\n\nPurpose\n\n\nThis macro is used to extract member information for SAS IdentityGroup (group and role)\nobjects. It can be used to extract Person (user) members, nested IdentityGroup (group and role)\nmembers, or both combined.\n\n\nIf you have any role contributions in your SAS environment then you will also see these as roles\nbeing members of other roles.\n\n\nParameters\n\n\n%macro metacodaIdGroupMembersExtract(\n   table=,\n   memberType=,\n   append=0,\n   xmlDir=,\n   debug=0\n   );\n\n\n\nThis macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.\n\n\ntable\n: \n(MANDATORY)\n\n\nThe output table name (1 or 2 level) that will be overwritten (or appended to).\n\n\nmemberType\n: \n(OPTIONAL)\n\n\nThe SAS metadata model type for the type of member identities that will be extracted.\nThe value must be either blank, Person, or IdentityGroup.\nIf the value is blank then both Person (user) and IdentityGroup (group and role) members\nwill be extracted. The default is blank.\n\n\nappend\n: \n(OPTIONAL)\n\n\nA flag (0/1) indicating whether to overwrite or append to the specified table.\nThe default is zero to overwrite.\nThis parameter is ignored when the memberType parameter is blank (and the table will be\noverwritten).\n\n\nxmlDir\n: \n(OPTIONAL)\n\n\nPath to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.\n\n\ndebug\n: \n(OPTIONAL)\n\n\nA flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.\n\n\nExamples\n\n\nExtract all member metadata for all groups and roles:\n\n\n%metacodaIdGroupMembersExtract(table=work.idGroupMembers)\n\n\n\nFor more examples see \nmetacodaIdGroupMembersExtractSample.sas\n.",
            "title": "%metacodaIdGroupMembersExtract"
        },
        {
            "location": "/sasautos/metacodaIdGroupMembersExtract/#sas-macro-metacodaidgroupmembersextract",
            "text": "",
            "title": "SAS Macro: %metacodaIdGroupMembersExtract"
        },
        {
            "location": "/sasautos/metacodaIdGroupMembersExtract/#purpose",
            "text": "This macro is used to extract member information for SAS IdentityGroup (group and role)\nobjects. It can be used to extract Person (user) members, nested IdentityGroup (group and role)\nmembers, or both combined.  If you have any role contributions in your SAS environment then you will also see these as roles\nbeing members of other roles.",
            "title": "Purpose"
        },
        {
            "location": "/sasautos/metacodaIdGroupMembersExtract/#parameters",
            "text": "%macro metacodaIdGroupMembersExtract(\n   table=,\n   memberType=,\n   append=0,\n   xmlDir=,\n   debug=0\n   );  This macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.  table :  (MANDATORY)  The output table name (1 or 2 level) that will be overwritten (or appended to).  memberType :  (OPTIONAL)  The SAS metadata model type for the type of member identities that will be extracted.\nThe value must be either blank, Person, or IdentityGroup.\nIf the value is blank then both Person (user) and IdentityGroup (group and role) members\nwill be extracted. The default is blank.  append :  (OPTIONAL)  A flag (0/1) indicating whether to overwrite or append to the specified table.\nThe default is zero to overwrite.\nThis parameter is ignored when the memberType parameter is blank (and the table will be\noverwritten).  xmlDir :  (OPTIONAL)  Path to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.  debug :  (OPTIONAL)  A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.",
            "title": "Parameters"
        },
        {
            "location": "/sasautos/metacodaIdGroupMembersExtract/#examples",
            "text": "Extract all member metadata for all groups and roles:  %metacodaIdGroupMembersExtract(table=work.idGroupMembers)  For more examples see  metacodaIdGroupMembersExtractSample.sas .",
            "title": "Examples"
        },
        {
            "location": "/sasautos/metacodaPersonEmailExtract/",
            "text": "SAS Macro: %metacodaPersonEmailExtract\n\n\nPurpose\n\n\nThis macro is used to extract basic attribute values for SAS metadata Email (address)\nobjects that are associated with Person (user) objects.\n\n\nParameters\n\n\n%macro metacodaPersonEmailExtract(\n   table=,\n   xmlDir=,\n   debug=0\n   );\n\n\n\nThis macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.\n\n\ntable\n: \n(MANDATORY)\n\n\nThe output table name (1 or 2 level) that will be overwritten.\n\n\nxmlDir\n: \n(OPTIONAL)\n\n\nPath to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.\n\n\ndebug\n: \n(OPTIONAL)\n\n\nA flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.\n\n\nExamples\n\n\nExtract email metadata for all users:\n\n\n%metacodaPersonEmailExtract(table=work.personEmails)\n\n\n\nFor more examples see \nmetacodaPersonEmailExtractSample.sas\n.",
            "title": "%metacodaPersonEmailExtract"
        },
        {
            "location": "/sasautos/metacodaPersonEmailExtract/#sas-macro-metacodapersonemailextract",
            "text": "",
            "title": "SAS Macro: %metacodaPersonEmailExtract"
        },
        {
            "location": "/sasautos/metacodaPersonEmailExtract/#purpose",
            "text": "This macro is used to extract basic attribute values for SAS metadata Email (address)\nobjects that are associated with Person (user) objects.",
            "title": "Purpose"
        },
        {
            "location": "/sasautos/metacodaPersonEmailExtract/#parameters",
            "text": "%macro metacodaPersonEmailExtract(\n   table=,\n   xmlDir=,\n   debug=0\n   );  This macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.  table :  (MANDATORY)  The output table name (1 or 2 level) that will be overwritten.  xmlDir :  (OPTIONAL)  Path to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.  debug :  (OPTIONAL)  A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.",
            "title": "Parameters"
        },
        {
            "location": "/sasautos/metacodaPersonEmailExtract/#examples",
            "text": "Extract email metadata for all users:  %metacodaPersonEmailExtract(table=work.personEmails)  For more examples see  metacodaPersonEmailExtractSample.sas .",
            "title": "Examples"
        },
        {
            "location": "/sasautos/metacodaPersonExtract/",
            "text": "SAS Macro: %metacodaPersonExtract\n\n\nPurpose\n\n\nThis macro is used to extract basic attribute values for Person objects (users) from SAS metadata.\n\n\nParameters\n\n\n%macro metacodaPersonExtract(\n   table=,\n   xmlDir=,\n   debug=0\n   );\n\n\n\nThis macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.\n\n\ntable\n: \n(MANDATORY)\n\n\nThe output table name (1 or 2 level) that will be overwritten.\n\n\nxmlDir\n: \n(OPTIONAL)\n\n\nPath to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.\n\n\ndebug\n: \n(OPTIONAL)\n\n\nA flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.\n\n\nExamples\n\n\nExtract basic metadata attributes for all users:\n\n\n%metacodaPersonExtract(table=work.persons)\n\n\n\nFor more examples see \nmetacodaPersonExtractSample.sas\n.",
            "title": "%metacodaPersonExtract"
        },
        {
            "location": "/sasautos/metacodaPersonExtract/#sas-macro-metacodapersonextract",
            "text": "",
            "title": "SAS Macro: %metacodaPersonExtract"
        },
        {
            "location": "/sasautos/metacodaPersonExtract/#purpose",
            "text": "This macro is used to extract basic attribute values for Person objects (users) from SAS metadata.",
            "title": "Purpose"
        },
        {
            "location": "/sasautos/metacodaPersonExtract/#parameters",
            "text": "%macro metacodaPersonExtract(\n   table=,\n   xmlDir=,\n   debug=0\n   );  This macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.  table :  (MANDATORY)  The output table name (1 or 2 level) that will be overwritten.  xmlDir :  (OPTIONAL)  Path to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.  debug :  (OPTIONAL)  A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.",
            "title": "Parameters"
        },
        {
            "location": "/sasautos/metacodaPersonExtract/#examples",
            "text": "Extract basic metadata attributes for all users:  %metacodaPersonExtract(table=work.persons)  For more examples see  metacodaPersonExtractSample.sas .",
            "title": "Examples"
        },
        {
            "location": "/sasautos/metacodaPersonIntLoginExtract/",
            "text": "SAS Macro: %metacodaPersonIntLoginExtract\n\n\nPurpose\n\n\nThis macro is used to extract basic attribute values for SAS metadata InternalLogin (account)\nobjects that are associated with Person (user) objects.\n\n\nParameters\n\n\n%macro metacodaPersonIntLoginExtract(\n   table=,\n   xmlDir=,\n   debug=0\n   );\n\n\n\nThis macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.\n\n\ntable\n: \n(MANDATORY)\n\n\nThe output table name (1 or 2 level) that will be overwritten.\n\n\nxmlDir\n: \n(OPTIONAL)\n\n\nPath to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.\n\n\ndebug\n: \n(OPTIONAL)\n\n\nA flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.\n\n\nExamples\n\n\nExtract InternalLogin metadata for all users:\n\n\n%metacodaPersonIntLoginExtract(table=work.personIntLogins)\n\n\n\nFor more examples see \nmetacodaPersonIntLoginExtractSample.sas\n.",
            "title": "%metacodaPersonIntLoginExtract"
        },
        {
            "location": "/sasautos/metacodaPersonIntLoginExtract/#sas-macro-metacodapersonintloginextract",
            "text": "",
            "title": "SAS Macro: %metacodaPersonIntLoginExtract"
        },
        {
            "location": "/sasautos/metacodaPersonIntLoginExtract/#purpose",
            "text": "This macro is used to extract basic attribute values for SAS metadata InternalLogin (account)\nobjects that are associated with Person (user) objects.",
            "title": "Purpose"
        },
        {
            "location": "/sasautos/metacodaPersonIntLoginExtract/#parameters",
            "text": "%macro metacodaPersonIntLoginExtract(\n   table=,\n   xmlDir=,\n   debug=0\n   );  This macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.  table :  (MANDATORY)  The output table name (1 or 2 level) that will be overwritten.  xmlDir :  (OPTIONAL)  Path to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.  debug :  (OPTIONAL)  A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.",
            "title": "Parameters"
        },
        {
            "location": "/sasautos/metacodaPersonIntLoginExtract/#examples",
            "text": "Extract InternalLogin metadata for all users:  %metacodaPersonIntLoginExtract(table=work.personIntLogins)  For more examples see  metacodaPersonIntLoginExtractSample.sas .",
            "title": "Examples"
        },
        {
            "location": "/sasautos/metacodaPersonLocationExtract/",
            "text": "SAS Macro: %metacodaPersonLocationExtract\n\n\nPurpose\n\n\nThis macro is used to extract basic attribute values for SAS metadata Location (physical address)\nobjects that are associated with Person (user) objects.\n\n\nParameters\n\n\n%macro metacodaPersonLocationExtract(\n   table=,\n   xmlDir=,\n   debug=0\n   );\n\n\n\nThis macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.\n\n\ntable\n: \n(MANDATORY)\n\n\nThe output table name (1 or 2 level) that will be overwritten.\n\n\nxmlDir\n: \n(OPTIONAL)\n\n\nPath to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.\n\n\ndebug\n: \n(OPTIONAL)\n\n\nA flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.\n\n\nExamples\n\n\nExtract location metadata for all users:\n\n\n%metacodaPersonLocationExtract(table=work.personLocations)\n\n\n\nFor more examples see \nmetacodaPersonLocationExtractSample.sas\n.",
            "title": "%metacodaPersonLocationExtract"
        },
        {
            "location": "/sasautos/metacodaPersonLocationExtract/#sas-macro-metacodapersonlocationextract",
            "text": "",
            "title": "SAS Macro: %metacodaPersonLocationExtract"
        },
        {
            "location": "/sasautos/metacodaPersonLocationExtract/#purpose",
            "text": "This macro is used to extract basic attribute values for SAS metadata Location (physical address)\nobjects that are associated with Person (user) objects.",
            "title": "Purpose"
        },
        {
            "location": "/sasautos/metacodaPersonLocationExtract/#parameters",
            "text": "%macro metacodaPersonLocationExtract(\n   table=,\n   xmlDir=,\n   debug=0\n   );  This macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.  table :  (MANDATORY)  The output table name (1 or 2 level) that will be overwritten.  xmlDir :  (OPTIONAL)  Path to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.  debug :  (OPTIONAL)  A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.",
            "title": "Parameters"
        },
        {
            "location": "/sasautos/metacodaPersonLocationExtract/#examples",
            "text": "Extract location metadata for all users:  %metacodaPersonLocationExtract(table=work.personLocations)  For more examples see  metacodaPersonLocationExtractSample.sas .",
            "title": "Examples"
        },
        {
            "location": "/sasautos/metacodaPersonPhoneExtract/",
            "text": "SAS Macro: %metacodaPersonPhoneExtract\n\n\nPurpose\n\n\nThis macro is used to extract basic attribute values for SAS metadata Phone (number)\nobjects that are associated with Person (user) objects.\n\n\nParameters\n\n\n%macro metacodaPersonPhoneExtract(\n   table=,\n   xmlDir=,\n   debug=0\n   );\n\n\n\nThis macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.\n\n\ntable\n: \n(MANDATORY)\n\n\nThe output table name (1 or 2 level) that will be overwritten.\n\n\nxmlDir\n: \n(OPTIONAL)\n\n\nPath to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.\n\n\ndebug\n: \n(OPTIONAL)\n\n\nA flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.\n\n\nExamples\n\n\nExtract phone metadata for all users:\n\n\n%metacodaPersonPhoneExtract(table=work.personPhones)\n\n\n\nFor more examples see \nmetacodaPersonPhoneExtractSample.sas\n.",
            "title": "%metacodaPersonPhoneExtract"
        },
        {
            "location": "/sasautos/metacodaPersonPhoneExtract/#sas-macro-metacodapersonphoneextract",
            "text": "",
            "title": "SAS Macro: %metacodaPersonPhoneExtract"
        },
        {
            "location": "/sasautos/metacodaPersonPhoneExtract/#purpose",
            "text": "This macro is used to extract basic attribute values for SAS metadata Phone (number)\nobjects that are associated with Person (user) objects.",
            "title": "Purpose"
        },
        {
            "location": "/sasautos/metacodaPersonPhoneExtract/#parameters",
            "text": "%macro metacodaPersonPhoneExtract(\n   table=,\n   xmlDir=,\n   debug=0\n   );  This macro accepts several mandatory and optional named parameters and generates a SAS table\nas output.  table :  (MANDATORY)  The output table name (1 or 2 level) that will be overwritten.  xmlDir :  (OPTIONAL)  Path to a directory where PROC METADATA request, response, and map XML files will be written.\nIf unspecified the work directory path will be used by default.  debug :  (OPTIONAL)  A flag (0/1) indicating whether to generate additional debug info for troubleshooting purposes.\nThe default is zero for no debug.",
            "title": "Parameters"
        },
        {
            "location": "/sasautos/metacodaPersonPhoneExtract/#examples",
            "text": "Extract phone metadata for all users:  %metacodaPersonPhoneExtract(table=work.personPhones)  For more examples see  metacodaPersonPhoneExtractSample.sas .",
            "title": "Examples"
        },
        {
            "location": "/sasautos/metacodaXMLEncode/",
            "text": "SAS Macro: %metacodaXMLEncode\n\n\nPurpose\n\n\nThis macro is used for consistent encoding of text so that it can be used in an XML file or stream,\nsuch as those used with SAS PROC METACODA.\n\n\nParameters\n\n\n%macro metacodaXMLEncode(text);\n\n\n\nThis macro accepts a single mandatory positional parameter to generate the encoded text.\nThe result is the generation of an htmlencode function call to encode the supplied text. \n\n\ntext\n: \n(MANDATORY)\n\n\nThe text to be encoded.\n\n\nExamples\n\n\nUsed in a data step, encodes the displayName variable, within an XML attribute specification. \n\n\nencoded = cats(' DisplayName=\"', %metacodaXMLEncode(displayName), '\"/>');\n\n\n\nFor another example see \nmetacodaXMLEncodeSample.sas\n.",
            "title": "%metacodaXMLEncode"
        },
        {
            "location": "/sasautos/metacodaXMLEncode/#sas-macro-metacodaxmlencode",
            "text": "",
            "title": "SAS Macro: %metacodaXMLEncode"
        },
        {
            "location": "/sasautos/metacodaXMLEncode/#purpose",
            "text": "This macro is used for consistent encoding of text so that it can be used in an XML file or stream,\nsuch as those used with SAS PROC METACODA.",
            "title": "Purpose"
        },
        {
            "location": "/sasautos/metacodaXMLEncode/#parameters",
            "text": "%macro metacodaXMLEncode(text);  This macro accepts a single mandatory positional parameter to generate the encoded text.\nThe result is the generation of an htmlencode function call to encode the supplied text.   text :  (MANDATORY)  The text to be encoded.",
            "title": "Parameters"
        },
        {
            "location": "/sasautos/metacodaXMLEncode/#examples",
            "text": "Used in a data step, encodes the displayName variable, within an XML attribute specification.   encoded = cats(' DisplayName=\"', %metacodaXMLEncode(displayName), '\"/>');  For another example see  metacodaXMLEncodeSample.sas .",
            "title": "Examples"
        },
        {
            "location": "/samples/idsp-samples/",
            "text": "Sample Identity Sync Profiles\n\n\nIdentity Sync Profiles are usually created by using the Metacoda Identity Sync Profile Wizard\nwithin SAS Management Console. This wizard only provides access to the most commonly used\nconfigurable elements. To access to some of the more advanced features you will need to edit\nthe IDSP XML directly.\n\n\nThese sample Identity Sync Profiles show how those features can be added to an IDSP.\n\n\nidsync-ad-basic.idsp\n\n\nA basic example for synchronising identities in a SAS metadata server with Microsoft Active\nDirectory. All of the other examples below can be compared with this basic example to review the\nXML changes required.\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-basic.idsp\n\n\nidsync-ad-capture-data-other-attrs.idsp\n\n\nDemonstrates how to capture intermediate, otherwise temporary, working tables used in the identity\nsync process so those tables can also be used for custom post-processing outside of the Metacoda\nIdentity Sync Plug-in. Also shows how to capture any additional AD object attributes required for\nthat custom post-processing e.g. sAMAccountName, distinguishedName and objectGUID.\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-capture-data-other-attrs.idsp\n\n\nidsync-ad-hybrid.idsp\n\n\nAn example of a hybrid IDSP and it's corresponding child IDSPs (d1 and d2) for synchronising\nidentities in a SAS metadata server with multiple sources, in this case 2x Microsoft Active\nDirectory domain forests.\n\n\nSee:\n\n\n\n\nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid.idsp\n\n\nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d1.idsp\n\n\nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d2.idsp",
            "title": "Sample Identity Sync Profiles"
        },
        {
            "location": "/samples/idsp-samples/#sample-identity-sync-profiles",
            "text": "Identity Sync Profiles are usually created by using the Metacoda Identity Sync Profile Wizard\nwithin SAS Management Console. This wizard only provides access to the most commonly used\nconfigurable elements. To access to some of the more advanced features you will need to edit\nthe IDSP XML directly.  These sample Identity Sync Profiles show how those features can be added to an IDSP.",
            "title": "Sample Identity Sync Profiles"
        },
        {
            "location": "/samples/idsp-samples/#idsync-ad-basicidsp",
            "text": "A basic example for synchronising identities in a SAS metadata server with Microsoft Active\nDirectory. All of the other examples below can be compared with this basic example to review the\nXML changes required.  See  https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-basic.idsp",
            "title": "idsync-ad-basic.idsp"
        },
        {
            "location": "/samples/idsp-samples/#idsync-ad-capture-data-other-attrsidsp",
            "text": "Demonstrates how to capture intermediate, otherwise temporary, working tables used in the identity\nsync process so those tables can also be used for custom post-processing outside of the Metacoda\nIdentity Sync Plug-in. Also shows how to capture any additional AD object attributes required for\nthat custom post-processing e.g. sAMAccountName, distinguishedName and objectGUID.  See  https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-capture-data-other-attrs.idsp",
            "title": "idsync-ad-capture-data-other-attrs.idsp"
        },
        {
            "location": "/samples/idsp-samples/#idsync-ad-hybrididsp",
            "text": "An example of a hybrid IDSP and it's corresponding child IDSPs (d1 and d2) for synchronising\nidentities in a SAS metadata server with multiple sources, in this case 2x Microsoft Active\nDirectory domain forests.  See:   https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid.idsp  https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d1.idsp  https://github.com/Metacoda/idsync-utils/blob/master/samples/idsync-ad-hybrid-d2.idsp",
            "title": "idsync-ad-hybrid.idsp"
        },
        {
            "location": "/samples/sas-samples/",
            "text": "Sample SAS Programs\n\n\nThese SAS programs provide examples of how the SAS macros in this repository can be used: \n\n\nmetacodaAuthDomainExtract.sas\n\n\nExtracts basic attributes for AuthenticationDomain objects in SAS metadata..\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaAuthDomainExtract.sas\n\n\nmetacodaExtIdExtractSample.sas\n\n\nExtracts SAS ExternalIdentity metadata used to link SAS identities (users and groups) with their\nequivalent external identities, such as users and groups in Microsoft Active Directory.\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaExtIdExtractSample.sas\n\n\nmetacodaExtIdUpdateSample.sas\n\n\nUpdates SAS ExternalIdentity metadata where there may be a requirement to remap/recode the\nidentifiers that connect SAS identities with their equivalent externally synchronised users and\ngroups.\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaExtIdUpdateSample.sas\n\n\nmetacodaIdentityGroupExtractSample.sas\n\n\nExtracts basic attributes for IdentityGroup (group and role) objects in SAS metadata..\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaIdentityGroupExtractSample.sas\n\n\nmetacodaIdentityLoginExtractSample.sas\n\n\nExtracts SAS metadata for Login (account) objects associated with Identity (user and/or group) objects.\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaIdentityLoginExtractSample.sas\n\n\nmetacodaIdGroupMembersExtractSample.sas\n\n\nExtract SAS IdentityGroup (group and role) members metadata.\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaIdGroupMembersExtractSample.sas\n\n\nmetacodaPersonEmailExtractSample.sas\n\n\nExtracts SAS metadata for Email (address) objects associated with Person (user) objects.\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonEmailExtractSample.sas\n\n\nmetacodaPersonExtractSample.sas\n\n\nExtracts basic attributes for Person (user) objects in SAS metadata..\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonExtractSample.sas\n\n\nmetacodaPersonIntLoginExtractSample.sas\n\n\nExtracts SAS metadata for InternalLogin (account) objects associated with Person (user) objects.\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonIntLoginExtractSample.sas\n\n\nmetacodaPersonLocationExtractSample.sas\n\n\nExtracts SAS metadata for Location (physical address) objects associated with Person (user) objects.\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonLocationExtractSample.sas\n\n\nmetacodaPersonPhoneExtractSample.sas\n\n\nExtracts SAS metadata for Phone (number) objects associated with Person (user) objects.\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonPhoneExtractSample.sas\n\n\nmetacodaXMLEncodeSample.sas\n\n\nA simple example of encoding text strings for use XML files/streams (such as SAS PROC METADATA).\n\n\nSee \nhttps://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaXMLEncodeSample.sas",
            "title": "Sample SAS Programs"
        },
        {
            "location": "/samples/sas-samples/#sample-sas-programs",
            "text": "These SAS programs provide examples of how the SAS macros in this repository can be used:",
            "title": "Sample SAS Programs"
        },
        {
            "location": "/samples/sas-samples/#metacodaauthdomainextractsas",
            "text": "Extracts basic attributes for AuthenticationDomain objects in SAS metadata..  See  https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaAuthDomainExtract.sas",
            "title": "metacodaAuthDomainExtract.sas"
        },
        {
            "location": "/samples/sas-samples/#metacodaextidextractsamplesas",
            "text": "Extracts SAS ExternalIdentity metadata used to link SAS identities (users and groups) with their\nequivalent external identities, such as users and groups in Microsoft Active Directory.  See  https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaExtIdExtractSample.sas",
            "title": "metacodaExtIdExtractSample.sas"
        },
        {
            "location": "/samples/sas-samples/#metacodaextidupdatesamplesas",
            "text": "Updates SAS ExternalIdentity metadata where there may be a requirement to remap/recode the\nidentifiers that connect SAS identities with their equivalent externally synchronised users and\ngroups.  See  https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaExtIdUpdateSample.sas",
            "title": "metacodaExtIdUpdateSample.sas"
        },
        {
            "location": "/samples/sas-samples/#metacodaidentitygroupextractsamplesas",
            "text": "Extracts basic attributes for IdentityGroup (group and role) objects in SAS metadata..  See  https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaIdentityGroupExtractSample.sas",
            "title": "metacodaIdentityGroupExtractSample.sas"
        },
        {
            "location": "/samples/sas-samples/#metacodaidentityloginextractsamplesas",
            "text": "Extracts SAS metadata for Login (account) objects associated with Identity (user and/or group) objects.  See  https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaIdentityLoginExtractSample.sas",
            "title": "metacodaIdentityLoginExtractSample.sas"
        },
        {
            "location": "/samples/sas-samples/#metacodaidgroupmembersextractsamplesas",
            "text": "Extract SAS IdentityGroup (group and role) members metadata.  See  https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaIdGroupMembersExtractSample.sas",
            "title": "metacodaIdGroupMembersExtractSample.sas"
        },
        {
            "location": "/samples/sas-samples/#metacodapersonemailextractsamplesas",
            "text": "Extracts SAS metadata for Email (address) objects associated with Person (user) objects.  See  https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonEmailExtractSample.sas",
            "title": "metacodaPersonEmailExtractSample.sas"
        },
        {
            "location": "/samples/sas-samples/#metacodapersonextractsamplesas",
            "text": "Extracts basic attributes for Person (user) objects in SAS metadata..  See  https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonExtractSample.sas",
            "title": "metacodaPersonExtractSample.sas"
        },
        {
            "location": "/samples/sas-samples/#metacodapersonintloginextractsamplesas",
            "text": "Extracts SAS metadata for InternalLogin (account) objects associated with Person (user) objects.  See  https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonIntLoginExtractSample.sas",
            "title": "metacodaPersonIntLoginExtractSample.sas"
        },
        {
            "location": "/samples/sas-samples/#metacodapersonlocationextractsamplesas",
            "text": "Extracts SAS metadata for Location (physical address) objects associated with Person (user) objects.  See  https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonLocationExtractSample.sas",
            "title": "metacodaPersonLocationExtractSample.sas"
        },
        {
            "location": "/samples/sas-samples/#metacodapersonphoneextractsamplesas",
            "text": "Extracts SAS metadata for Phone (number) objects associated with Person (user) objects.  See  https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaPersonPhoneExtractSample.sas",
            "title": "metacodaPersonPhoneExtractSample.sas"
        },
        {
            "location": "/samples/sas-samples/#metacodaxmlencodesamplesas",
            "text": "A simple example of encoding text strings for use XML files/streams (such as SAS PROC METADATA).  See  https://github.com/Metacoda/idsync-utils/blob/master/samples/metacodaXMLEncodeSample.sas",
            "title": "metacodaXMLEncodeSample.sas"
        },
        {
            "location": "/resources/",
            "text": "Resources\n\n\nThe following is a list of further resources where you can find more information on the Metacoda\nIdentity Sync Plug-in, the identity sync process, and Identity Sync Profiles (IDSPs):\n\n\n\n\nMetacoda Identity Sync Product Page\n\n\nMetacoda Plug-ins Customer Documentation\n\n\nPlatformAdmin.com Blog Posts:\n\n\nSynchronising SAS Platform Identities\n\n\nIdentity Sync: Multiple Active Directory Domains (Single Forest)\n\n\nIdentity Sync: Finding Your Keys\n\n\n\n\n\n\nYouTube:\n\n\nIdentity Sync Plug-in Demo",
            "title": "Resources"
        },
        {
            "location": "/resources/#resources",
            "text": "The following is a list of further resources where you can find more information on the Metacoda\nIdentity Sync Plug-in, the identity sync process, and Identity Sync Profiles (IDSPs):   Metacoda Identity Sync Product Page  Metacoda Plug-ins Customer Documentation  PlatformAdmin.com Blog Posts:  Synchronising SAS Platform Identities  Identity Sync: Multiple Active Directory Domains (Single Forest)  Identity Sync: Finding Your Keys    YouTube:  Identity Sync Plug-in Demo",
            "title": "Resources"
        },
        {
            "location": "/about/license/",
            "text": "License\n\n\nThe utilities contained in this repository are licensed under the terms of the\n\nApache License 2.0\n.\nSee \nLICENSE.txt\n for more information.\n\n\nThe Metacoda Identity Sync Plug-in which these utilities are intended to support is a commercial\nproduct from Metacoda Pty Ltd, and must be separately licensed from Metacoda if you want to use\nthese utilities with it.\n\n\nIf you do not license the Metacoda Identity Sync Plug-in from Metacoda then some of these utilities\nmay still be of use to you with alternative SAS identity synchronisation processes.\nThe license referenced above permits such use.",
            "title": "License"
        },
        {
            "location": "/about/license/#license",
            "text": "The utilities contained in this repository are licensed under the terms of the Apache License 2.0 .\nSee  LICENSE.txt  for more information.  The Metacoda Identity Sync Plug-in which these utilities are intended to support is a commercial\nproduct from Metacoda Pty Ltd, and must be separately licensed from Metacoda if you want to use\nthese utilities with it.  If you do not license the Metacoda Identity Sync Plug-in from Metacoda then some of these utilities\nmay still be of use to you with alternative SAS identity synchronisation processes.\nThe license referenced above permits such use.",
            "title": "License"
        },
        {
            "location": "/about/trademarks/",
            "text": "Trademarks\n\n\nMetacoda\u00ae and all other Metacoda product or service names are registered trademarks or trademarks of\n\nMetacoda Group Pty Ltd\n in the USA and other countries.\n\n\nSAS\u00ae and all other SAS Institute Inc. product or service names are registered trademarks or\ntrademarks of \nSAS Institute Inc.\n in the USA and other countries. \u00ae indicates\nUSA registration.\n\n\nOther product and company names mentioned herein may be registered trademarks or trademarks of\ntheir respective owners.",
            "title": "Trademarks"
        },
        {
            "location": "/about/trademarks/#trademarks",
            "text": "Metacoda\u00ae and all other Metacoda product or service names are registered trademarks or trademarks of Metacoda Group Pty Ltd  in the USA and other countries.  SAS\u00ae and all other SAS Institute Inc. product or service names are registered trademarks or\ntrademarks of  SAS Institute Inc.  in the USA and other countries. \u00ae indicates\nUSA registration.  Other product and company names mentioned herein may be registered trademarks or trademarks of\ntheir respective owners.",
            "title": "Trademarks"
        }
    ]
}